
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000023ae  00002442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800080  00800080  00002462  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  00002462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 000003e8  00000000  00000000  000024b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001fa0  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001120  00000000  00000000  00004838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00002203  00000000  00000000  00005958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000009e0  00000000  00000000  00007b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000f94  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000006ba  00000000  00000000  000094d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000021f  00000000  00000000  00009b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__vector_1>
       8:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_2>
       c:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0

00000062 <.Loc.1>:
      62:	a0 e6       	ldi	r26, 0x60	; 96

00000064 <.Loc.2>:
      64:	b0 e0       	ldi	r27, 0x00	; 0

00000066 <.Loc.3>:
      66:	ee ea       	ldi	r30, 0xAE	; 174

00000068 <.Loc.4>:
      68:	f3 e2       	ldi	r31, 0x23	; 35

0000006a <.Loc.5>:
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.L__do_copy_data_start>

0000006c <.L__do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+

0000006e <.Loc.7>:
      6e:	0d 92       	st	X+, r0

00000070 <.L__do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128

00000072 <.Loc.9>:
      72:	b1 07       	cpc	r27, r17

00000074 <.Loc.10>:
      74:	d9 f7       	brne	.-10     	; 0x6c <.L__do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0

00000078 <.Loc.1>:
      78:	a0 e8       	ldi	r26, 0x80	; 128

0000007a <.Loc.2>:
      7a:	b0 e0       	ldi	r27, 0x00	; 0

0000007c <.Loc.3>:
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.Loc.5>

0000007e <.Loc.4>:
      7e:	1d 92       	st	X+, r1

00000080 <.Loc.5>:
      80:	a6 38       	cpi	r26, 0x86	; 134

00000082 <.Loc.6>:
      82:	b2 07       	cpc	r27, r18

00000084 <.Loc.7>:
      84:	e1 f7       	brne	.-8      	; 0x7e <.Loc.4>

00000086 <L0^A>:
      86:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <main>
      8a:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_VoidInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void UART_VoidInit(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62

0000009c <.Loc.1>:

	//u8 UCSRC_Data =0;
	UCSRC_REG_Data DATA ;
	DIO_voidSetPinDirection(PORTD_ID,PIN0,PIN_INPUT);
      9c:	40 e0       	ldi	r20, 0x00	; 0
      9e:	60 e0       	ldi	r22, 0x00	; 0
      a0:	83 e0       	ldi	r24, 0x03	; 3
      a2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

000000a6 <.Loc.2>:
	DIO_voidSetPinDirection(PORTD_ID,PIN1,PIN_OUTPUT);
      a6:	41 e0       	ldi	r20, 0x01	; 1
      a8:	61 e0       	ldi	r22, 0x01	; 1
      aa:	83 e0       	ldi	r24, 0x03	; 3
      ac:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

000000b0 <.Loc.3>:

	/*   TO SELECT BAUD RATE   */
	UBRRL_REG = ( (u32)(F_OSC * 1000000) /((u32)16 * UART_BAUD_RATE)) - 1 ;
      b0:	89 e2       	ldi	r24, 0x29	; 41
      b2:	90 e0       	ldi	r25, 0x00	; 0

000000b4 <.Loc.4>:
      b4:	23 e3       	ldi	r18, 0x33	; 51
      b6:	fc 01       	movw	r30, r24
      b8:	20 83       	st	Z, r18

000000ba <.Loc.5>:

	DATA.UCSRC_UPM =UART_PARITY_MODE ;
      ba:	89 81       	ldd	r24, Y+1	; 0x01
      bc:	87 7e       	andi	r24, 0xE7	; 231
      be:	89 83       	std	Y+1, r24	; 0x01

000000c0 <.Loc.6>:
	DATA.UCSRC_UCPOL=UART_NUM_STOP_BIT ;
      c0:	89 81       	ldd	r24, Y+1	; 0x01
      c2:	8e 7f       	andi	r24, 0xFE	; 254
      c4:	89 83       	std	Y+1, r24	; 0x01

000000c6 <.Loc.7>:
	/***********************************************/

	/***********************************************/

	/* TO SELECT CHARACTER SIZE -> 8 BITS */
	DATA.UCSRC_UCSZ=0b11 ;
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	86 60       	ori	r24, 0x06	; 6
      ca:	89 83       	std	Y+1, r24	; 0x01

000000cc <.Loc.8>:
	UCSRB_REG->UCSRB_UCSZ2=0b0 ;
      cc:	8a e2       	ldi	r24, 0x2A	; 42
      ce:	90 e0       	ldi	r25, 0x00	; 0

000000d0 <.Loc.9>:
      d0:	fc 01       	movw	r30, r24
      d2:	20 81       	ld	r18, Z
      d4:	2b 7f       	andi	r18, 0xFB	; 251
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18

000000da <.Loc.10>:


	/***** Write data in UCSRC_REG in one time ***********/
	DATA.UCSRC_URSEL=ONE ;
      da:	89 81       	ldd	r24, Y+1	; 0x01
      dc:	80 64       	ori	r24, 0x40	; 64
      de:	89 83       	std	Y+1, r24	; 0x01

000000e0 <.Loc.11>:
	UCSRC_REG  = DATA.BYTE ;
      e0:	80 e4       	ldi	r24, 0x40	; 64
      e2:	90 e0       	ldi	r25, 0x00	; 0

000000e4 <.Loc.12>:
      e4:	29 81       	ldd	r18, Y+1	; 0x01

000000e6 <.Loc.13>:
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18

000000ea <.Loc.14>:

	/* TO ENABLE RX CIRCUIT */
	UCSRB_REG->UCSRB_RXEN =ONE  ;
      ea:	8a e2       	ldi	r24, 0x2A	; 42
      ec:	90 e0       	ldi	r25, 0x00	; 0

000000ee <.Loc.15>:
      ee:	fc 01       	movw	r30, r24
      f0:	20 81       	ld	r18, Z
      f2:	20 61       	ori	r18, 0x10	; 16
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18

000000f8 <.Loc.16>:


	/* TO ENABLE TX CIRCUIT */
	UCSRB_REG->UCSRB_TXEN =ONE  ;
      f8:	8a e2       	ldi	r24, 0x2A	; 42
      fa:	90 e0       	ldi	r25, 0x00	; 0

000000fc <.Loc.17>:
      fc:	fc 01       	movw	r30, r24
      fe:	20 81       	ld	r18, Z
     100:	28 60       	ori	r18, 0x08	; 8
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18

00000106 <.Loc.18>:

}
     106:	00 00       	nop
     108:	0f 90       	pop	r0
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <UART_VoidSendChar>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
UART_ERROR UART_VoidSendChar(u8 Copy_U8_Data)
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	00 d0       	rcall	.+0      	; 0x116 <L0^A>

00000116 <L0^A>:
     116:	00 d0       	rcall	.+0      	; 0x118 <L0^A>

00000118 <L0^A>:
     118:	00 d0       	rcall	.+0      	; 0x11a <L0^A>

0000011a <L0^A>:
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	8e 83       	std	Y+6, r24	; 0x06

00000120 <.Loc.20>:
	/* while(GET_BIT(UCSRA_REG,UCSRA_UDRE_BIT) ==0);
			UDR_REG = Copy_U8_Data; */
	u32 Local_U32_Counter = 0;
     120:	19 82       	std	Y+1, r1	; 0x01
     122:	1a 82       	std	Y+2, r1	; 0x02
     124:	1b 82       	std	Y+3, r1	; 0x03
     126:	1c 82       	std	Y+4, r1	; 0x04

00000128 <.Loc.21>:
	UART_ERROR Send_check_ERROR= UART_NO_ERROR;
     128:	1d 82       	std	Y+5, r1	; 0x05

0000012a <.Loc.22>:

	while(Local_U32_Counter <= UART_POLLING_TIME)
     12a:	1a c0       	rjmp	.+52     	; 0x160 <.L3>

0000012c <.L5>:
	{
		Local_U32_Counter++;
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	ab 81       	ldd	r26, Y+3	; 0x03
     132:	bc 81       	ldd	r27, Y+4	; 0x04
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	a1 1d       	adc	r26, r1
     138:	b1 1d       	adc	r27, r1
     13a:	89 83       	std	Y+1, r24	; 0x01
     13c:	9a 83       	std	Y+2, r25	; 0x02
     13e:	ab 83       	std	Y+3, r26	; 0x03
     140:	bc 83       	std	Y+4, r27	; 0x04

00000142 <.Loc.24>:
		if( (UCSRA_REG->UCSRA_UDRE) == UART_FINISHED_TRANSMITTING)
     142:	8b e2       	ldi	r24, 0x2B	; 43
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	85 fb       	bst	r24, 5
     14c:	88 27       	eor	r24, r24
     14e:	80 f9       	bld	r24, 0

00000150 <.Loc.25>:
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	31 f4       	brne	.+12     	; 0x160 <.L3>

00000154 <.Loc.26>:
		{
			UDR_REG = Copy_U8_Data;
     154:	8c e2       	ldi	r24, 0x2C	; 44
     156:	90 e0       	ldi	r25, 0x00	; 0

00000158 <.Loc.27>:
     158:	2e 81       	ldd	r18, Y+6	; 0x06
     15a:	fc 01       	movw	r30, r24
     15c:	20 83       	st	Z, r18

0000015e <.Loc.28>:
			break;
     15e:	0a c0       	rjmp	.+20     	; 0x174 <.L4>

00000160 <.L3>:
	while(Local_U32_Counter <= UART_POLLING_TIME)
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	ab 81       	ldd	r26, Y+3	; 0x03
     166:	bc 81       	ldd	r27, Y+4	; 0x04
     168:	81 3d       	cpi	r24, 0xD1	; 209
     16a:	f7 e0       	ldi	r31, 0x07	; 7
     16c:	9f 07       	cpc	r25, r31
     16e:	a1 05       	cpc	r26, r1
     170:	b1 05       	cpc	r27, r1
     172:	e0 f2       	brcs	.-72     	; 0x12c <.L5>

00000174 <.L4>:
		}
	}
	if(Local_U32_Counter == UART_POLLING_TIME)
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	9a 81       	ldd	r25, Y+2	; 0x02
     178:	ab 81       	ldd	r26, Y+3	; 0x03
     17a:	bc 81       	ldd	r27, Y+4	; 0x04
     17c:	80 3d       	cpi	r24, 0xD0	; 208
     17e:	27 e0       	ldi	r18, 0x07	; 7
     180:	92 07       	cpc	r25, r18
     182:	a1 05       	cpc	r26, r1
     184:	b1 05       	cpc	r27, r1
     186:	11 f4       	brne	.+4      	; 0x18c <.L6>

00000188 <.Loc.31>:
	{
		Send_check_ERROR=UART_TIME_OUT_ERROR ;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	8d 83       	std	Y+5, r24	; 0x05

0000018c <.L6>:
	}

	return  Send_check_ERROR ;
     18c:	8d 81       	ldd	r24, Y+5	; 0x05

0000018e <.Loc.33>:


}
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <UART_VoidSendString>:
void UART_VoidSendString(u8* PO_U8_Data)
{
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <L0^A>

000001a6 <L0^A>:
     1a6:	0f 92       	push	r0
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	9b 83       	std	Y+3, r25	; 0x03
     1ae:	8a 83       	std	Y+2, r24	; 0x02

000001b0 <.Loc.35>:
	u8 count=0 ;
     1b0:	19 82       	std	Y+1, r1	; 0x01

000001b2 <.Loc.36>:

	while(PO_U8_Data[count] !='\0')
     1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <.L9>

000001b4 <.L10>:
	{
		UART_VoidSendChar(PO_U8_Data[count]);
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	88 2f       	mov	r24, r24
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	2a 81       	ldd	r18, Y+2	; 0x02
     1bc:	3b 81       	ldd	r19, Y+3	; 0x03
     1be:	82 0f       	add	r24, r18
     1c0:	93 1f       	adc	r25, r19

000001c2 <.Loc.38>:
     1c2:	fc 01       	movw	r30, r24
     1c4:	80 81       	ld	r24, Z
     1c6:	0e 94 88 00 	call	0x110	; 0x110 <UART_VoidSendChar>

000001ca <.Loc.39>:
		count ++ ;
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	8f 5f       	subi	r24, 0xFF	; 255
     1ce:	89 83       	std	Y+1, r24	; 0x01

000001d0 <.L9>:
	while(PO_U8_Data[count] !='\0')
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	88 2f       	mov	r24, r24
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	2a 81       	ldd	r18, Y+2	; 0x02
     1d8:	3b 81       	ldd	r19, Y+3	; 0x03
     1da:	82 0f       	add	r24, r18
     1dc:	93 1f       	adc	r25, r19
     1de:	fc 01       	movw	r30, r24
     1e0:	80 81       	ld	r24, Z

000001e2 <.Loc.41>:
     1e2:	81 15       	cp	r24, r1
     1e4:	39 f7       	brne	.-50     	; 0x1b4 <.L10>

000001e6 <.Loc.42>:
	}


}
     1e6:	00 00       	nop
     1e8:	00 00       	nop
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <UART_VoidReceiveString>:

void UART_VoidReceiveString(u8* PO_U8_Data)
{
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <L0^A>

000001fc <L0^A>:
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <L0^A>

000001fe <L0^A>:
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	9c 83       	std	Y+4, r25	; 0x04
     204:	8b 83       	std	Y+3, r24	; 0x03

00000206 <.Loc.44>:
	s8 count= -1 ;
     206:	8f ef       	ldi	r24, 0xFF	; 255
     208:	89 83       	std	Y+1, r24	; 0x01

0000020a <.Loc.45>:

	u8 c=0 ;
     20a:	1a 82       	std	Y+2, r1	; 0x02

0000020c <.Loc.46>:
	for( ; c!=10 ; c++)
     20c:	0c c0       	rjmp	.+24     	; 0x226 <.L12>

0000020e <.L13>:
	{
		PO_U8_Data[c]=0 ;
     20e:	8a 81       	ldd	r24, Y+2	; 0x02
     210:	88 2f       	mov	r24, r24
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	2b 81       	ldd	r18, Y+3	; 0x03
     216:	3c 81       	ldd	r19, Y+4	; 0x04
     218:	82 0f       	add	r24, r18
     21a:	93 1f       	adc	r25, r19

0000021c <.Loc.48>:
     21c:	fc 01       	movw	r30, r24
     21e:	10 82       	st	Z, r1

00000220 <.Loc.49>:
	for( ; c!=10 ; c++)
     220:	8a 81       	ldd	r24, Y+2	; 0x02
     222:	8f 5f       	subi	r24, 0xFF	; 255
     224:	8a 83       	std	Y+2, r24	; 0x02

00000226 <.L12>:
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	8a 30       	cpi	r24, 0x0A	; 10
     22a:	89 f7       	brne	.-30     	; 0x20e <.L13>

0000022c <.L14>:
	}
	do
	{
		count ++ ;
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	8f 5f       	subi	r24, 0xFF	; 255
     230:	89 83       	std	Y+1, r24	; 0x01

00000232 <.Loc.52>:
		UART_U8ReceiveChar(&PO_U8_Data[count]);
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	08 2e       	mov	r0, r24
     236:	00 0c       	add	r0, r0
     238:	99 0b       	sbc	r25, r25
     23a:	2b 81       	ldd	r18, Y+3	; 0x03
     23c:	3c 81       	ldd	r19, Y+4	; 0x04
     23e:	82 0f       	add	r24, r18
     240:	93 1f       	adc	r25, r19
     242:	0e 94 38 01 	call	0x270	; 0x270 <UART_U8ReceiveChar>

00000246 <.Loc.53>:

	}while(PO_U8_Data[count] !='#');
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	08 2e       	mov	r0, r24
     24a:	00 0c       	add	r0, r0
     24c:	99 0b       	sbc	r25, r25
     24e:	2b 81       	ldd	r18, Y+3	; 0x03
     250:	3c 81       	ldd	r19, Y+4	; 0x04
     252:	82 0f       	add	r24, r18
     254:	93 1f       	adc	r25, r19
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z

0000025a <.Loc.54>:
     25a:	83 32       	cpi	r24, 0x23	; 35
     25c:	39 f7       	brne	.-50     	; 0x22c <.L14>

0000025e <.Loc.55>:



}
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <UART_U8ReceiveChar>:
/*------------------------------------------------------------------------------------*/
/*   FUNCTION BODY                                                                    */
/*------------------------------------------------------------------------------------*/

UART_ERROR UART_U8ReceiveChar(u8 *copy_p8_Data )
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	00 d0       	rcall	.+0      	; 0x276 <L0^A>

00000276 <L0^A>:
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	9a 83       	std	Y+2, r25	; 0x02
     27c:	89 83       	std	Y+1, r24	; 0x01

0000027e <.Loc.57>:
	...

00000280 <.L16>:
	while((UCSRA_REG->UCSRA_RXC) == 0);
     280:	8b e2       	ldi	r24, 0x2B	; 43
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	fc 01       	movw	r30, r24
     286:	80 81       	ld	r24, Z
     288:	87 fb       	bst	r24, 7
     28a:	88 27       	eor	r24, r24
     28c:	80 f9       	bld	r24, 0

0000028e <.Loc.59>:
     28e:	81 15       	cp	r24, r1
     290:	b9 f3       	breq	.-18     	; 0x280 <.L16>

00000292 <.Loc.60>:
		*copy_p8_Data = UDR_REG;
     292:	8c e2       	ldi	r24, 0x2C	; 44
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	fc 01       	movw	r30, r24
     298:	20 81       	ld	r18, Z

0000029a <.Loc.61>:
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	9a 81       	ldd	r25, Y+2	; 0x02
     29e:	fc 01       	movw	r30, r24
     2a0:	20 83       	st	Z, r18

000002a2 <.Loc.62>:
		return UART_NO_ERROR;
     2a2:	80 e0       	ldi	r24, 0x00	; 0

000002a4 <.Loc.63>:


}
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <UART_SendNumber>:
void UART_SendNumber(u8 num) {
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	0f 92       	push	r0
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	89 83       	std	Y+1, r24	; 0x01

000002ba <.Loc.65>:
    if (num >= 100) {
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	84 36       	cpi	r24, 0x64	; 100
     2be:	d8 f1       	brcs	.+118    	; 0x336 <.L19>

000002c0 <.Loc.66>:
        UART_VoidSendChar((num / 100) + '0');
     2c0:	99 81       	ldd	r25, Y+1	; 0x01
     2c2:	89 e2       	ldi	r24, 0x29	; 41
     2c4:	98 9f       	mul	r25, r24
     2c6:	81 2d       	mov	r24, r1
     2c8:	11 24       	eor	r1, r1
     2ca:	82 95       	swap	r24
     2cc:	8f 70       	andi	r24, 0x0F	; 15
     2ce:	80 5d       	subi	r24, 0xD0	; 208
     2d0:	0e 94 88 00 	call	0x110	; 0x110 <UART_VoidSendChar>

000002d4 <.Loc.67>:
        UART_VoidSendChar(((num / 10) % 10) + '0');
     2d4:	99 81       	ldd	r25, Y+1	; 0x01
     2d6:	8d ec       	ldi	r24, 0xCD	; 205
     2d8:	98 9f       	mul	r25, r24
     2da:	81 2d       	mov	r24, r1
     2dc:	11 24       	eor	r1, r1
     2de:	28 2f       	mov	r18, r24
     2e0:	26 95       	lsr	r18
     2e2:	26 95       	lsr	r18
     2e4:	26 95       	lsr	r18
     2e6:	8d ec       	ldi	r24, 0xCD	; 205
     2e8:	28 9f       	mul	r18, r24
     2ea:	81 2d       	mov	r24, r1
     2ec:	11 24       	eor	r1, r1
     2ee:	98 2f       	mov	r25, r24
     2f0:	96 95       	lsr	r25
     2f2:	96 95       	lsr	r25
     2f4:	96 95       	lsr	r25
     2f6:	89 2f       	mov	r24, r25
     2f8:	88 0f       	add	r24, r24
     2fa:	88 0f       	add	r24, r24
     2fc:	89 0f       	add	r24, r25
     2fe:	88 0f       	add	r24, r24
     300:	92 2f       	mov	r25, r18
     302:	98 1b       	sub	r25, r24
     304:	80 e3       	ldi	r24, 0x30	; 48
     306:	89 0f       	add	r24, r25
     308:	0e 94 88 00 	call	0x110	; 0x110 <UART_VoidSendChar>

0000030c <.Loc.68>:
        UART_VoidSendChar((num % 10) + '0');
     30c:	29 81       	ldd	r18, Y+1	; 0x01
     30e:	8d ec       	ldi	r24, 0xCD	; 205
     310:	28 9f       	mul	r18, r24
     312:	81 2d       	mov	r24, r1
     314:	11 24       	eor	r1, r1
     316:	98 2f       	mov	r25, r24
     318:	96 95       	lsr	r25
     31a:	96 95       	lsr	r25
     31c:	96 95       	lsr	r25
     31e:	89 2f       	mov	r24, r25
     320:	88 0f       	add	r24, r24
     322:	88 0f       	add	r24, r24
     324:	89 0f       	add	r24, r25
     326:	88 0f       	add	r24, r24
     328:	92 2f       	mov	r25, r18
     32a:	98 1b       	sub	r25, r24
     32c:	80 e3       	ldi	r24, 0x30	; 48
     32e:	89 0f       	add	r24, r25
     330:	0e 94 88 00 	call	0x110	; 0x110 <UART_VoidSendChar>

00000334 <.Loc.69>:
        UART_VoidSendChar((num / 10) + '0');
        UART_VoidSendChar((num % 10) + '0');
    } else {
        UART_VoidSendChar(num + '0');
    }
}
     334:	27 c0       	rjmp	.+78     	; 0x384 <.L22>

00000336 <.L19>:
    } else if (num >= 10) {
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	8a 30       	cpi	r24, 0x0A	; 10
     33a:	00 f1       	brcs	.+64     	; 0x37c <.L21>

0000033c <.Loc.71>:
        UART_VoidSendChar((num / 10) + '0');
     33c:	99 81       	ldd	r25, Y+1	; 0x01
     33e:	8d ec       	ldi	r24, 0xCD	; 205
     340:	98 9f       	mul	r25, r24
     342:	81 2d       	mov	r24, r1
     344:	11 24       	eor	r1, r1
     346:	86 95       	lsr	r24
     348:	86 95       	lsr	r24
     34a:	86 95       	lsr	r24
     34c:	80 5d       	subi	r24, 0xD0	; 208
     34e:	0e 94 88 00 	call	0x110	; 0x110 <UART_VoidSendChar>

00000352 <.Loc.72>:
        UART_VoidSendChar((num % 10) + '0');
     352:	29 81       	ldd	r18, Y+1	; 0x01
     354:	8d ec       	ldi	r24, 0xCD	; 205
     356:	28 9f       	mul	r18, r24
     358:	81 2d       	mov	r24, r1
     35a:	11 24       	eor	r1, r1
     35c:	98 2f       	mov	r25, r24
     35e:	96 95       	lsr	r25
     360:	96 95       	lsr	r25
     362:	96 95       	lsr	r25
     364:	89 2f       	mov	r24, r25
     366:	88 0f       	add	r24, r24
     368:	88 0f       	add	r24, r24
     36a:	89 0f       	add	r24, r25
     36c:	88 0f       	add	r24, r24
     36e:	92 2f       	mov	r25, r18
     370:	98 1b       	sub	r25, r24
     372:	80 e3       	ldi	r24, 0x30	; 48
     374:	89 0f       	add	r24, r25
     376:	0e 94 88 00 	call	0x110	; 0x110 <UART_VoidSendChar>

0000037a <.Loc.73>:
}
     37a:	04 c0       	rjmp	.+8      	; 0x384 <.L22>

0000037c <.L21>:
        UART_VoidSendChar(num + '0');
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	80 5d       	subi	r24, 0xD0	; 208
     380:	0e 94 88 00 	call	0x110	; 0x110 <UART_VoidSendChar>

00000384 <.L22>:
}
     384:	00 00       	nop
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <TWI_MasterInit>:
#include "util/delay.h"
#include "TWI_INTERFACE.h"
#include "TWI_CONFIG.h"
#include "TWI_PRIVATE.h"

void TWI_MasterInit(){
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62

00000396 <.Loc.1>:
 TWSR.BITS.TWPS0=0;
     396:	81 e2       	ldi	r24, 0x21	; 33
     398:	90 e0       	ldi	r25, 0x00	; 0

0000039a <.Loc.2>:
     39a:	fc 01       	movw	r30, r24
     39c:	20 81       	ld	r18, Z
     39e:	2e 7f       	andi	r18, 0xFE	; 254
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18

000003a4 <.Loc.3>:
 TWSR.BITS.TWPS1=0;
     3a4:	81 e2       	ldi	r24, 0x21	; 33
     3a6:	90 e0       	ldi	r25, 0x00	; 0

000003a8 <.Loc.4>:
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 81       	ld	r18, Z
     3ac:	2d 7f       	andi	r18, 0xFD	; 253
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18

000003b2 <.Loc.5>:
//set the prescaler to 1
 TWBR.ALL = (u8)((CPU_FREQ/SCL_FREQ)-16)/2;
     3b2:	80 e2       	ldi	r24, 0x20	; 32
     3b4:	90 e0       	ldi	r25, 0x00	; 0

000003b6 <.Loc.6>:
     3b6:	22 e0       	ldi	r18, 0x02	; 2
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18

000003bc <.Loc.7>:
 //set the value of TWBR Register
 TWCR.BITS.TWEN = 1;
     3bc:	86 e5       	ldi	r24, 0x56	; 86
     3be:	90 e0       	ldi	r25, 0x00	; 0

000003c0 <.Loc.8>:
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 81       	ld	r18, Z
     3c4:	24 60       	ori	r18, 0x04	; 4
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 83       	st	Z, r18

000003ca <.Loc.9>:
 //Enable the TWI
}
     3ca:	00 00       	nop
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <TWI_StartCondition>:
void TWI_StartCondition(){
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62

000003da <.Loc.11>:
    TWCR.BITS.TWSTA = 1;  
     3da:	86 e5       	ldi	r24, 0x56	; 86
     3dc:	90 e0       	ldi	r25, 0x00	; 0

000003de <.Loc.12>:
     3de:	fc 01       	movw	r30, r24
     3e0:	20 81       	ld	r18, Z
     3e2:	20 62       	ori	r18, 0x20	; 32
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18

000003e8 <.Loc.13>:
     // Start Condition
    TWCR.BITS.TWEN  = 1;  
     3e8:	86 e5       	ldi	r24, 0x56	; 86
     3ea:	90 e0       	ldi	r25, 0x00	; 0

000003ec <.Loc.14>:
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 81       	ld	r18, Z
     3f0:	24 60       	ori	r18, 0x04	; 4
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18

000003f6 <.Loc.15>:
     // Enable TWI
    TWCR.BITS.TWINT = 1;
     3f6:	86 e5       	ldi	r24, 0x56	; 86
     3f8:	90 e0       	ldi	r25, 0x00	; 0

000003fa <.Loc.16>:
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 81       	ld	r18, Z
     3fe:	20 68       	ori	r18, 0x80	; 128
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18

00000404 <.Loc.17>:
	...

00000406 <.L3>:
    // Clear interrupt flag to start the operation
     while (TWCR.BITS.TWINT == 0);
     406:	86 e5       	ldi	r24, 0x56	; 86
     408:	90 e0       	ldi	r25, 0x00	; 0

0000040a <.Loc.19>:
     40a:	fc 01       	movw	r30, r24
     40c:	80 81       	ld	r24, Z
     40e:	87 fb       	bst	r24, 7
     410:	88 27       	eor	r24, r24
     412:	80 f9       	bld	r24, 0

00000414 <.Loc.20>:
     414:	81 15       	cp	r24, r1
     416:	b9 f3       	breq	.-18     	; 0x406 <.L3>

00000418 <.Loc.21>:
     //wait until the end of operation 
}
     418:	00 00       	nop
     41a:	00 00       	nop
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <TWI_Stop>:
void TWI_Stop(){
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62

0000042a <.Loc.23>:
    TWCR.BITS.TWSTO = 1;  
     42a:	86 e5       	ldi	r24, 0x56	; 86
     42c:	90 e0       	ldi	r25, 0x00	; 0

0000042e <.Loc.24>:
     42e:	fc 01       	movw	r30, r24
     430:	20 81       	ld	r18, Z
     432:	20 61       	ori	r18, 0x10	; 16
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18

00000438 <.Loc.25>:
     // Stop Condition
    TWCR.BITS.TWEN  = 1;  
     438:	86 e5       	ldi	r24, 0x56	; 86
     43a:	90 e0       	ldi	r25, 0x00	; 0

0000043c <.Loc.26>:
     43c:	fc 01       	movw	r30, r24
     43e:	20 81       	ld	r18, Z
     440:	24 60       	ori	r18, 0x04	; 4
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18

00000446 <.Loc.27>:
     // Enable TWI
    TWCR.BITS.TWINT = 1;
     446:	86 e5       	ldi	r24, 0x56	; 86
     448:	90 e0       	ldi	r25, 0x00	; 0

0000044a <.Loc.28>:
     44a:	fc 01       	movw	r30, r24
     44c:	20 81       	ld	r18, Z
     44e:	20 68       	ori	r18, 0x80	; 128
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18

00000454 <.Loc.29>:
    // Clear interrupt flag to start the operation

}
     454:	00 00       	nop
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <TWI_SendAddress>:
void TWI_SendAddress(u8 address, u8 select){
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <L0^A>

00000462 <L0^A>:
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	6a 83       	std	Y+2, r22	; 0x02

0000046a <.Loc.31>:
    TWDR.ALL = (address << 1) | (select & 0x01);
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	98 2f       	mov	r25, r24
     46e:	99 0f       	add	r25, r25

00000470 <.Loc.32>:
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	81 70       	andi	r24, 0x01	; 1

00000474 <.Loc.33>:
     474:	29 2f       	mov	r18, r25
     476:	28 2b       	or	r18, r24

00000478 <.Loc.34>:
     478:	83 e2       	ldi	r24, 0x23	; 35
     47a:	90 e0       	ldi	r25, 0x00	; 0

0000047c <.Loc.35>:
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18

00000480 <.Loc.36>:
    //send the slave address and choose whether read or write
    TWCR.BITS.TWEN  = 1;
     480:	86 e5       	ldi	r24, 0x56	; 86
     482:	90 e0       	ldi	r25, 0x00	; 0

00000484 <.Loc.37>:
     484:	fc 01       	movw	r30, r24
     486:	20 81       	ld	r18, Z
     488:	24 60       	ori	r18, 0x04	; 4
     48a:	fc 01       	movw	r30, r24
     48c:	20 83       	st	Z, r18

0000048e <.Loc.38>:
    // Enable TWI
    TWCR.BITS.TWINT = 1;
     48e:	86 e5       	ldi	r24, 0x56	; 86
     490:	90 e0       	ldi	r25, 0x00	; 0

00000492 <.Loc.39>:
     492:	fc 01       	movw	r30, r24
     494:	20 81       	ld	r18, Z
     496:	20 68       	ori	r18, 0x80	; 128
     498:	fc 01       	movw	r30, r24
     49a:	20 83       	st	Z, r18

0000049c <.Loc.40>:
	...

0000049e <.L6>:
    // Clear interrupt flag to start the operation
    while (TWCR.BITS.TWINT == 0);
     49e:	86 e5       	ldi	r24, 0x56	; 86
     4a0:	90 e0       	ldi	r25, 0x00	; 0

000004a2 <.Loc.42>:
     4a2:	fc 01       	movw	r30, r24
     4a4:	80 81       	ld	r24, Z
     4a6:	87 fb       	bst	r24, 7
     4a8:	88 27       	eor	r24, r24
     4aa:	80 f9       	bld	r24, 0

000004ac <.Loc.43>:
     4ac:	81 15       	cp	r24, r1
     4ae:	b9 f3       	breq	.-18     	; 0x49e <.L6>

000004b0 <.Loc.44>:
    //wait until the end of operation 

}
     4b0:	00 00       	nop
     4b2:	00 00       	nop
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <TWI_WriteData>:
void TWI_WriteData(u8 data){
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	0f 92       	push	r0
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	89 83       	std	Y+1, r24	; 0x01

000004ca <.Loc.46>:
    TWDR.ALL = data;
     4ca:	83 e2       	ldi	r24, 0x23	; 35
     4cc:	90 e0       	ldi	r25, 0x00	; 0

000004ce <.Loc.47>:
     4ce:	29 81       	ldd	r18, Y+1	; 0x01
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18

000004d4 <.Loc.48>:
    //send data to slave 
    TWCR.BITS.TWEN  = 1;
     4d4:	86 e5       	ldi	r24, 0x56	; 86
     4d6:	90 e0       	ldi	r25, 0x00	; 0

000004d8 <.Loc.49>:
     4d8:	fc 01       	movw	r30, r24
     4da:	20 81       	ld	r18, Z
     4dc:	24 60       	ori	r18, 0x04	; 4
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18

000004e2 <.Loc.50>:
    // Enable TWI
    TWCR.BITS.TWINT = 1;
     4e2:	86 e5       	ldi	r24, 0x56	; 86
     4e4:	90 e0       	ldi	r25, 0x00	; 0

000004e6 <.Loc.51>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 81       	ld	r18, Z
     4ea:	20 68       	ori	r18, 0x80	; 128
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18

000004f0 <.Loc.52>:
	...

000004f2 <.L8>:
    // Clear interrupt flag to start the operation
    while (TWCR.BITS.TWINT == 0);
     4f2:	86 e5       	ldi	r24, 0x56	; 86
     4f4:	90 e0       	ldi	r25, 0x00	; 0

000004f6 <.Loc.54>:
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	87 fb       	bst	r24, 7
     4fc:	88 27       	eor	r24, r24
     4fe:	80 f9       	bld	r24, 0

00000500 <.Loc.55>:
     500:	81 15       	cp	r24, r1
     502:	b9 f3       	breq	.-18     	; 0x4f2 <.L8>

00000504 <.Loc.56>:
    //wait until the end of operation
}
     504:	00 00       	nop
     506:	00 00       	nop
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <TWI_ReadData_ACK>:
u8 TWI_ReadData_ACK(){
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62

00000518 <.Loc.58>:
    TWCR.BITS.TWEA  = 1; 
     518:	86 e5       	ldi	r24, 0x56	; 86
     51a:	90 e0       	ldi	r25, 0x00	; 0

0000051c <.Loc.59>:
     51c:	fc 01       	movw	r30, r24
     51e:	20 81       	ld	r18, Z
     520:	20 64       	ori	r18, 0x40	; 64
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18

00000526 <.Loc.60>:
    // Enable ACK
    TWCR.BITS.TWEN  = 1;
     526:	86 e5       	ldi	r24, 0x56	; 86
     528:	90 e0       	ldi	r25, 0x00	; 0

0000052a <.Loc.61>:
     52a:	fc 01       	movw	r30, r24
     52c:	20 81       	ld	r18, Z
     52e:	24 60       	ori	r18, 0x04	; 4
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18

00000534 <.Loc.62>:
    // Enable TWI
    TWCR.BITS.TWINT = 1;
     534:	86 e5       	ldi	r24, 0x56	; 86
     536:	90 e0       	ldi	r25, 0x00	; 0

00000538 <.Loc.63>:
     538:	fc 01       	movw	r30, r24
     53a:	20 81       	ld	r18, Z
     53c:	20 68       	ori	r18, 0x80	; 128
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18

00000542 <.Loc.64>:
	...

00000544 <.L10>:
     // Clear interrupt flag to start the operation
    while (TWCR.BITS.TWINT == 0);
     544:	86 e5       	ldi	r24, 0x56	; 86
     546:	90 e0       	ldi	r25, 0x00	; 0

00000548 <.Loc.66>:
     548:	fc 01       	movw	r30, r24
     54a:	80 81       	ld	r24, Z
     54c:	87 fb       	bst	r24, 7
     54e:	88 27       	eor	r24, r24
     550:	80 f9       	bld	r24, 0

00000552 <.Loc.67>:
     552:	81 15       	cp	r24, r1
     554:	b9 f3       	breq	.-18     	; 0x544 <.L10>

00000556 <.Loc.68>:
    //wait until the end of operation
    return TWDR.ALL;
     556:	83 e2       	ldi	r24, 0x23	; 35
     558:	90 e0       	ldi	r25, 0x00	; 0

0000055a <.Loc.69>:
     55a:	fc 01       	movw	r30, r24
     55c:	80 81       	ld	r24, Z

0000055e <.Loc.70>:
    //return the data that master read from slave
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <TWI_ReadData_NACK>:
u8 TWI_ReadData_NACK(){
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62

0000056c <.Loc.72>:
    TWCR.BITS.TWEA  = 0; 
     56c:	86 e5       	ldi	r24, 0x56	; 86
     56e:	90 e0       	ldi	r25, 0x00	; 0

00000570 <.Loc.73>:
     570:	fc 01       	movw	r30, r24
     572:	20 81       	ld	r18, Z
     574:	2f 7b       	andi	r18, 0xBF	; 191
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18

0000057a <.Loc.74>:
    // Enable NACK
    TWCR.BITS.TWEN  = 1;
     57a:	86 e5       	ldi	r24, 0x56	; 86
     57c:	90 e0       	ldi	r25, 0x00	; 0

0000057e <.Loc.75>:
     57e:	fc 01       	movw	r30, r24
     580:	20 81       	ld	r18, Z
     582:	24 60       	ori	r18, 0x04	; 4
     584:	fc 01       	movw	r30, r24
     586:	20 83       	st	Z, r18

00000588 <.Loc.76>:
    // Enable TWI
    TWCR.BITS.TWINT = 1;
     588:	86 e5       	ldi	r24, 0x56	; 86
     58a:	90 e0       	ldi	r25, 0x00	; 0

0000058c <.Loc.77>:
     58c:	fc 01       	movw	r30, r24
     58e:	20 81       	ld	r18, Z
     590:	20 68       	ori	r18, 0x80	; 128
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18

00000596 <.Loc.78>:
	...

00000598 <.L13>:
     // Clear interrupt flag to start the operation
    while (TWCR.BITS.TWINT == 0);
     598:	86 e5       	ldi	r24, 0x56	; 86
     59a:	90 e0       	ldi	r25, 0x00	; 0

0000059c <.Loc.80>:
     59c:	fc 01       	movw	r30, r24
     59e:	80 81       	ld	r24, Z
     5a0:	87 fb       	bst	r24, 7
     5a2:	88 27       	eor	r24, r24
     5a4:	80 f9       	bld	r24, 0

000005a6 <.Loc.81>:
     5a6:	81 15       	cp	r24, r1
     5a8:	b9 f3       	breq	.-18     	; 0x598 <.L13>

000005aa <.Loc.82>:
    //wait until the end of operation
    return TWDR.ALL;
     5aa:	83 e2       	ldi	r24, 0x23	; 35
     5ac:	90 e0       	ldi	r25, 0x00	; 0

000005ae <.Loc.83>:
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z

000005b2 <.Loc.84>:
    //return the data that master read from slave
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <TWI_SlaveInit>:

void TWI_SlaveInit(u8 slave_address){
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	0f 92       	push	r0
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	89 83       	std	Y+1, r24	; 0x01

000005c4 <.Loc.86>:
    TWAR.ALL = (slave_address << 1);
     5c4:	82 e2       	ldi	r24, 0x22	; 34
     5c6:	90 e0       	ldi	r25, 0x00	; 0

000005c8 <.Loc.87>:
     5c8:	29 81       	ldd	r18, Y+1	; 0x01
     5ca:	22 0f       	add	r18, r18

000005cc <.Loc.88>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18

000005d0 <.Loc.89>:
    //send slave address
    TWCR.BITS.TWEA = 1;
     5d0:	86 e5       	ldi	r24, 0x56	; 86
     5d2:	90 e0       	ldi	r25, 0x00	; 0

000005d4 <.Loc.90>:
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 81       	ld	r18, Z
     5d8:	20 64       	ori	r18, 0x40	; 64
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18

000005de <.Loc.91>:
    // Enable ACK
    TWCR.BITS.TWEN = 1;
     5de:	86 e5       	ldi	r24, 0x56	; 86
     5e0:	90 e0       	ldi	r25, 0x00	; 0

000005e2 <.Loc.92>:
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 81       	ld	r18, Z
     5e6:	24 60       	ori	r18, 0x04	; 4
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18

000005ec <.Loc.93>:
    // Enable TWI
    TWCR.BITS.TWINT = 1;
     5ec:	86 e5       	ldi	r24, 0x56	; 86
     5ee:	90 e0       	ldi	r25, 0x00	; 0

000005f0 <.Loc.94>:
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 81       	ld	r18, Z
     5f4:	20 68       	ori	r18, 0x80	; 128
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18

000005fa <.Loc.95>:
    // Clear interrupt flag to start the operation
}
     5fa:	00 00       	nop
     5fc:	0f 90       	pop	r0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <TWI_SlaveWaitMaster>:
void TWI_SlaveWaitMaster(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62

0000060c <.Loc.97>:
	...

0000060e <.L17>:
    while (TWCR.BITS.TWINT == 0);
     60e:	86 e5       	ldi	r24, 0x56	; 86
     610:	90 e0       	ldi	r25, 0x00	; 0

00000612 <.Loc.99>:
     612:	fc 01       	movw	r30, r24
     614:	80 81       	ld	r24, Z
     616:	87 fb       	bst	r24, 7
     618:	88 27       	eor	r24, r24
     61a:	80 f9       	bld	r24, 0

0000061c <.Loc.100>:
     61c:	81 15       	cp	r24, r1
     61e:	b9 f3       	breq	.-18     	; 0x60e <.L17>

00000620 <.Loc.101>:
     //wait until the end of operation
}
     620:	00 00       	nop
     622:	00 00       	nop
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <TWI_SlaveRead>:
u8 TWI_SlaveRead(){
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62

00000632 <.Loc.103>:
    TWCR.BITS.TWEA  = 1;
     632:	86 e5       	ldi	r24, 0x56	; 86
     634:	90 e0       	ldi	r25, 0x00	; 0

00000636 <.Loc.104>:
     636:	fc 01       	movw	r30, r24
     638:	20 81       	ld	r18, Z
     63a:	20 64       	ori	r18, 0x40	; 64
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18

00000640 <.Loc.105>:
    // Enable ACK
    TWCR.BITS.TWEN  = 1;
     640:	86 e5       	ldi	r24, 0x56	; 86
     642:	90 e0       	ldi	r25, 0x00	; 0

00000644 <.Loc.106>:
     644:	fc 01       	movw	r30, r24
     646:	20 81       	ld	r18, Z
     648:	24 60       	ori	r18, 0x04	; 4
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18

0000064e <.Loc.107>:
    // Enable TWI
    TWCR.BITS.TWINT = 1;
     64e:	86 e5       	ldi	r24, 0x56	; 86
     650:	90 e0       	ldi	r25, 0x00	; 0

00000652 <.Loc.108>:
     652:	fc 01       	movw	r30, r24
     654:	20 81       	ld	r18, Z
     656:	20 68       	ori	r18, 0x80	; 128
     658:	fc 01       	movw	r30, r24
     65a:	20 83       	st	Z, r18

0000065c <.Loc.109>:
	...

0000065e <.L19>:
    // Clear interrupt flag to start the operation
    while (TWCR.BITS.TWINT == 0);
     65e:	86 e5       	ldi	r24, 0x56	; 86
     660:	90 e0       	ldi	r25, 0x00	; 0

00000662 <.Loc.111>:
     662:	fc 01       	movw	r30, r24
     664:	80 81       	ld	r24, Z
     666:	87 fb       	bst	r24, 7
     668:	88 27       	eor	r24, r24
     66a:	80 f9       	bld	r24, 0

0000066c <.Loc.112>:
     66c:	81 15       	cp	r24, r1
     66e:	b9 f3       	breq	.-18     	; 0x65e <.L19>

00000670 <.Loc.113>:
    //wait until the end of operation
    return TWDR.ALL;
     670:	83 e2       	ldi	r24, 0x23	; 35
     672:	90 e0       	ldi	r25, 0x00	; 0

00000674 <.Loc.114>:
     674:	fc 01       	movw	r30, r24
     676:	80 81       	ld	r24, Z

00000678 <.Loc.115>:
    //return the recieved data from slave
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <TWI_SlaveWrite>:
void TWI_SlaveWrite(u8 data){
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	0f 92       	push	r0
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	89 83       	std	Y+1, r24	; 0x01

0000068a <.Loc.117>:
    TWDR.ALL = data;
     68a:	83 e2       	ldi	r24, 0x23	; 35
     68c:	90 e0       	ldi	r25, 0x00	; 0

0000068e <.Loc.118>:
     68e:	29 81       	ldd	r18, Y+1	; 0x01
     690:	fc 01       	movw	r30, r24
     692:	20 83       	st	Z, r18

00000694 <.Loc.119>:
    //send data to master
    TWCR.BITS.TWEA  = 1;
     694:	86 e5       	ldi	r24, 0x56	; 86
     696:	90 e0       	ldi	r25, 0x00	; 0

00000698 <.Loc.120>:
     698:	fc 01       	movw	r30, r24
     69a:	20 81       	ld	r18, Z
     69c:	20 64       	ori	r18, 0x40	; 64
     69e:	fc 01       	movw	r30, r24
     6a0:	20 83       	st	Z, r18

000006a2 <.Loc.121>:
    // Enable ACK
    TWCR.BITS.TWEN  = 1;
     6a2:	86 e5       	ldi	r24, 0x56	; 86
     6a4:	90 e0       	ldi	r25, 0x00	; 0

000006a6 <.Loc.122>:
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 81       	ld	r18, Z
     6aa:	24 60       	ori	r18, 0x04	; 4
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18

000006b0 <.Loc.123>:
    // Enable TWI
    TWCR.BITS.TWINT = 1; 
     6b0:	86 e5       	ldi	r24, 0x56	; 86
     6b2:	90 e0       	ldi	r25, 0x00	; 0

000006b4 <.Loc.124>:
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 81       	ld	r18, Z
     6b8:	20 68       	ori	r18, 0x80	; 128
     6ba:	fc 01       	movw	r30, r24
     6bc:	20 83       	st	Z, r18

000006be <.Loc.125>:
	...

000006c0 <.L22>:
    // Clear interrupt flag to start the operation
    while (TWCR.BITS.TWINT == 0);
     6c0:	86 e5       	ldi	r24, 0x56	; 86
     6c2:	90 e0       	ldi	r25, 0x00	; 0

000006c4 <.Loc.127>:
     6c4:	fc 01       	movw	r30, r24
     6c6:	80 81       	ld	r24, Z
     6c8:	87 fb       	bst	r24, 7
     6ca:	88 27       	eor	r24, r24
     6cc:	80 f9       	bld	r24, 0

000006ce <.Loc.128>:
     6ce:	81 15       	cp	r24, r1
     6d0:	b9 f3       	breq	.-18     	; 0x6c0 <.L22>

000006d2 <.Loc.129>:
    //wait until the end of operation
}
     6d2:	00 00       	nop
     6d4:	00 00       	nop
     6d6:	0f 90       	pop	r0
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <TWI_EnableGeneralCall>:
void TWI_EnableGeneralCall(){
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62

000006e6 <.Loc.131>:
    TWAR.BITS.TWGCE = 1;
     6e6:	82 e2       	ldi	r24, 0x22	; 34
     6e8:	90 e0       	ldi	r25, 0x00	; 0

000006ea <.Loc.132>:
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 81       	ld	r18, Z
     6ee:	21 60       	ori	r18, 0x01	; 1
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18

000006f4 <.Loc.133>:
    //enable the general call
}
     6f4:	00 00       	nop
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <M_TIMER1_voidPwm1Init>:
#include "TIMER1_config.h"



void M_TIMER1_voidPwm1Init(void)
{
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62

00000704 <.Loc.1>:
	/* to enable output circuit for PD5 pin */

	DIO_voidSetPinDirection(PORTD_ID,PIN5,PIN_OUTPUT);
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	65 e0       	ldi	r22, 0x05	; 5
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

0000070e <.Loc.2>:

	/* to select mode 14 in table 47 */
	CLR_BIT(TCCR1A_REG,WGM10);
     70e:	8f e4       	ldi	r24, 0x4F	; 79
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	fc 01       	movw	r30, r24
     714:	20 81       	ld	r18, Z
     716:	8f e4       	ldi	r24, 0x4F	; 79
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	2e 7f       	andi	r18, 0xFE	; 254
     71c:	fc 01       	movw	r30, r24
     71e:	20 83       	st	Z, r18

00000720 <.Loc.3>:
	SET_BIT(TCCR1A_REG,WGM11);
     720:	8f e4       	ldi	r24, 0x4F	; 79
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fc 01       	movw	r30, r24
     726:	20 81       	ld	r18, Z
     728:	8f e4       	ldi	r24, 0x4F	; 79
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	22 60       	ori	r18, 0x02	; 2
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18

00000732 <.Loc.4>:
	SET_BIT(TCCR1B_REG,WGM12);
     732:	8e e4       	ldi	r24, 0x4E	; 78
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	fc 01       	movw	r30, r24
     738:	20 81       	ld	r18, Z
     73a:	8e e4       	ldi	r24, 0x4E	; 78
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	28 60       	ori	r18, 0x08	; 8
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18

00000744 <.Loc.5>:
	SET_BIT(TCCR1B_REG,WGM13);
     744:	8e e4       	ldi	r24, 0x4E	; 78
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	20 81       	ld	r18, Z
     74c:	8e e4       	ldi	r24, 0x4E	; 78
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	20 61       	ori	r18, 0x10	; 16
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18

00000756 <.Loc.6>:

	/* to select non inverting mode */
	SET_BIT(TCCR1A_REG,COM1A1);
     756:	8f e4       	ldi	r24, 0x4F	; 79
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	8f e4       	ldi	r24, 0x4F	; 79
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	20 68       	ori	r18, 0x80	; 128
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18

00000768 <.Loc.7>:
	CLR_BIT(TCCR1A_REG,COM1A0);
     768:	8f e4       	ldi	r24, 0x4F	; 79
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	fc 01       	movw	r30, r24
     76e:	20 81       	ld	r18, Z
     770:	8f e4       	ldi	r24, 0x4F	; 79
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	2f 7b       	andi	r18, 0xBF	; 191
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18

0000077a <.Loc.8>:
}
     77a:	00 00       	nop
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <M_TIMER1_voidPwm1SetTop>:
void M_TIMER1_voidPwm1SetTop(void)
{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62

0000078a <.Loc.10>:
	//to make TIMER at 20ms top  when PRESCALER = 256  at  1M F
	ICR1_REG=78.125;
     78a:	86 e4       	ldi	r24, 0x46	; 70
     78c:	90 e0       	ldi	r25, 0x00	; 0

0000078e <.Loc.11>:
     78e:	2e e4       	ldi	r18, 0x4E	; 78
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	fc 01       	movw	r30, r24
     794:	31 83       	std	Z+1, r19	; 0x01
     796:	20 83       	st	Z, r18

00000798 <.Loc.12>:
}
     798:	00 00       	nop
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <M_TIMER1_voidPwm1SetDutyCycle>:
void M_TIMER1_voidPwm1SetDutyCycle(u16 Copy_u8DutyCycle)
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <L0^A>

000007a6 <L0^A>:
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	9a 83       	std	Y+2, r25	; 0x02
     7ac:	89 83       	std	Y+1, r24	; 0x01

000007ae <.Loc.14>:
	// pass num between 25 and 65
	OCR1A_REG=Copy_u8DutyCycle ;
     7ae:	8a e4       	ldi	r24, 0x4A	; 74
     7b0:	90 e0       	ldi	r25, 0x00	; 0

000007b2 <.Loc.15>:
     7b2:	29 81       	ldd	r18, Y+1	; 0x01
     7b4:	3a 81       	ldd	r19, Y+2	; 0x02
     7b6:	fc 01       	movw	r30, r24
     7b8:	31 83       	std	Z+1, r19	; 0x01
     7ba:	20 83       	st	Z, r18

000007bc <.Loc.16>:

}
     7bc:	00 00       	nop
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <M_TIMER1_voidPwm1Start>:
void M_TIMER1_voidPwm1Start(void)
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62

000007d0 <.Loc.18>:
#if   TIMER1_PRESCALER   ==   1024
	SET_BIT(TCCR1B_REG,CS10);
	CLR_BIT(TCCR1B_REG,CS11);
	SET_BIT(TCCR1B_REG,CS12);
#elif TIMER1_PRESCALER   ==   256
	CLR_BIT(TCCR1B_REG,CS10);
     7d0:	8e e4       	ldi	r24, 0x4E	; 78
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 81       	ld	r18, Z
     7d8:	8e e4       	ldi	r24, 0x4E	; 78
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	2e 7f       	andi	r18, 0xFE	; 254
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18

000007e2 <.Loc.19>:
	CLR_BIT(TCCR1B_REG,CS11);
     7e2:	8e e4       	ldi	r24, 0x4E	; 78
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 81       	ld	r18, Z
     7ea:	8e e4       	ldi	r24, 0x4E	; 78
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	2d 7f       	andi	r18, 0xFD	; 253
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 83       	st	Z, r18

000007f4 <.Loc.20>:
	SET_BIT(TCCR1B_REG,CS12);
     7f4:	8e e4       	ldi	r24, 0x4E	; 78
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 81       	ld	r18, Z
     7fc:	8e e4       	ldi	r24, 0x4E	; 78
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	24 60       	ori	r18, 0x04	; 4
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18

00000806 <.Loc.21>:
#endif
}
     806:	00 00       	nop
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <M_TIMER1_voidPwm1Stop>:
void M_TIMER1_voidPwm1Stop(void)
{
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62

00000816 <.Loc.23>:
	CLR_BIT(TCCR1B_REG,CS10);
     816:	8e e4       	ldi	r24, 0x4E	; 78
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	fc 01       	movw	r30, r24
     81c:	20 81       	ld	r18, Z
     81e:	8e e4       	ldi	r24, 0x4E	; 78
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	2e 7f       	andi	r18, 0xFE	; 254
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18

00000828 <.Loc.24>:
	CLR_BIT(TCCR1B_REG,CS11);
     828:	8e e4       	ldi	r24, 0x4E	; 78
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	fc 01       	movw	r30, r24
     82e:	20 81       	ld	r18, Z
     830:	8e e4       	ldi	r24, 0x4E	; 78
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	2d 7f       	andi	r18, 0xFD	; 253
     836:	fc 01       	movw	r30, r24
     838:	20 83       	st	Z, r18

0000083a <.Loc.25>:
	CLR_BIT(TCCR1B_REG,CS12);
     83a:	8e e4       	ldi	r24, 0x4E	; 78
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	20 81       	ld	r18, Z
     842:	8e e4       	ldi	r24, 0x4E	; 78
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	2b 7f       	andi	r18, 0xFB	; 251
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18

0000084c <.Loc.26>:
}
     84c:	00 00       	nop
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <TIMER0_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER0_VoidInit(void)
{
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62

0000085c <.Loc.1>:


/**************************************/
#elif  MOOD==PWM_MOOD
/**************************************/
	DIO_voidSetPinDirection(PORTB_ID,PIN3,PIN_OUTPUT);
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	63 e0       	ldi	r22, 0x03	; 3
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

00000866 <.Loc.2>:
	TCCR0_REG->TCCR0_WGM00=1;
     866:	83 e5       	ldi	r24, 0x53	; 83
     868:	90 e0       	ldi	r25, 0x00	; 0

0000086a <.Loc.3>:
     86a:	fc 01       	movw	r30, r24
     86c:	20 81       	ld	r18, Z
     86e:	20 64       	ori	r18, 0x40	; 64
     870:	fc 01       	movw	r30, r24
     872:	20 83       	st	Z, r18

00000874 <.Loc.4>:
	TCCR0_REG->TCCR0_WGM01=1;
     874:	83 e5       	ldi	r24, 0x53	; 83
     876:	90 e0       	ldi	r25, 0x00	; 0

00000878 <.Loc.5>:
     878:	fc 01       	movw	r30, r24
     87a:	20 81       	ld	r18, Z
     87c:	28 60       	ori	r18, 0x08	; 8
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18

00000882 <.Loc.6>:

	TCCR0_REG->TCCR0_COM = PWM_COMPARE_MATCH;
     882:	83 e5       	ldi	r24, 0x53	; 83
     884:	90 e0       	ldi	r25, 0x00	; 0

00000886 <.Loc.7>:
     886:	fc 01       	movw	r30, r24
     888:	20 81       	ld	r18, Z
     88a:	2f 7c       	andi	r18, 0xCF	; 207
     88c:	20 62       	ori	r18, 0x20	; 32
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18

00000892 <.Loc.8>:
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
     892:	00 00       	nop
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <TIMER0_VoidStop>:

/*****************************************************************************/
void TIMER0_VoidStop(void)
{
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62

000008a2 <.Loc.10>:
	TCCR0_REG->TCCR0_CS0=No_FREQ;
     8a2:	83 e5       	ldi	r24, 0x53	; 83
     8a4:	90 e0       	ldi	r25, 0x00	; 0

000008a6 <.Loc.11>:
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 81       	ld	r18, Z
     8aa:	28 7f       	andi	r18, 0xF8	; 248
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 83       	st	Z, r18

000008b0 <.Loc.12>:

}
     8b0:	00 00       	nop
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <TIMER0_VoidStart>:


/*****************************************************************************/
void TIMER0_VoidStart(void)
{
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62

000008c0 <.Loc.14>:

	TCCR0_REG->TCCR0_CS0=PRESCALER;
     8c0:	83 e5       	ldi	r24, 0x53	; 83
     8c2:	90 e0       	ldi	r25, 0x00	; 0

000008c4 <.Loc.15>:
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 81       	ld	r18, Z
     8c8:	28 7f       	andi	r18, 0xF8	; 248
     8ca:	24 60       	ori	r18, 0x04	; 4
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18

000008d0 <.Loc.16>:

}
     8d0:	00 00       	nop
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <TIMER0_VoidSetPreload>:

/*****************************************************************************/
void TIMER0_VoidSetPreload(u8 copy_u8PRELOAD )
{
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	0f 92       	push	r0
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	89 83       	std	Y+1, r24	; 0x01

000008e4 <.Loc.18>:

	TCNT0_REG=copy_u8PRELOAD;
     8e4:	82 e5       	ldi	r24, 0x52	; 82
     8e6:	90 e0       	ldi	r25, 0x00	; 0

000008e8 <.Loc.19>:
     8e8:	29 81       	ldd	r18, Y+1	; 0x01
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18

000008ee <.Loc.20>:
}
     8ee:	00 00       	nop
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <TIMER0_VoidVal>:

/*****************************************************************************/

u8 TIMER0_VoidVal(void )
{
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62

00000900 <.Loc.22>:

	return  TCNT0_REG ;
     900:	82 e5       	ldi	r24, 0x52	; 82
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	fc 01       	movw	r30, r24
     906:	80 81       	ld	r24, Z

00000908 <.Loc.23>:
}
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <TIMER0_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER0_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	0f 92       	push	r0
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	89 83       	std	Y+1, r24	; 0x01

0000091e <.Loc.25>:
#if PWM_COMPARE_MATCH == CLEAR_ON_COMPARE_MATCH_SET_ON_TOP
	//OCR0_REG =   ( ( (f32)copy_u8Val / 100 ) * (255) );
	  OCR0_REG =   ( ( (u32)copy_u8Val * 255 ) / (100) );
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	48 2f       	mov	r20, r24
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0

00000928 <.Loc.26>:
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	dc 01       	movw	r26, r24
     92e:	9a 01       	movw	r18, r20
     930:	ab 01       	movw	r20, r22
     932:	0e 94 a0 10 	call	0x2140	; 0x2140 <__muluhisi3>
     936:	dc 01       	movw	r26, r24
     938:	cb 01       	movw	r24, r22

0000093a <.Loc.27>:
     93a:	04 e6       	ldi	r16, 0x64	; 100
     93c:	10 e0       	ldi	r17, 0x00	; 0
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	bc 01       	movw	r22, r24
     944:	cd 01       	movw	r24, r26
     946:	a9 01       	movw	r20, r18
     948:	98 01       	movw	r18, r16
     94a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__udivmodsi4>
     94e:	da 01       	movw	r26, r20
     950:	c9 01       	movw	r24, r18
     952:	ac 01       	movw	r20, r24
     954:	bd 01       	movw	r22, r26

00000956 <.Loc.28>:
     956:	8c e5       	ldi	r24, 0x5C	; 92
     958:	90 e0       	ldi	r25, 0x00	; 0

0000095a <.Loc.29>:
     95a:	24 2f       	mov	r18, r20
     95c:	fc 01       	movw	r30, r24
     95e:	20 83       	st	Z, r18

00000960 <.Loc.30>:

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR0_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR0_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
     960:	00 00       	nop
     962:	0f 90       	pop	r0
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <WDT_VoidEnabel>:

/*
 * watch dog timer IN TIMER_1
 */
void WDT_VoidEnabel(void )
{
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62

00000976 <.Loc.32>:

	//SET_BIT(WDTCR_,3);
	WDTCR_REG->WDTCR_WDE=1;
     976:	81 e4       	ldi	r24, 0x41	; 65
     978:	90 e0       	ldi	r25, 0x00	; 0

0000097a <.Loc.33>:
     97a:	fc 01       	movw	r30, r24
     97c:	20 81       	ld	r18, Z
     97e:	28 60       	ori	r18, 0x08	; 8
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18

00000984 <.Loc.34>:
}
     984:	00 00       	nop
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <WDT_VoidDisEnabel>:

void WDT_VoidDisEnabel(void )
{
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62

00000994 <.Loc.36>:
//	WDTCR_==(1<<4)|(1<<3);
//	WDTCR_=0 ;

WDTCR_REG->WDTCR_Data=(1<<4)|(1<<3);
     994:	81 e4       	ldi	r24, 0x41	; 65
     996:	90 e0       	ldi	r25, 0x00	; 0

00000998 <.Loc.37>:
     998:	28 e1       	ldi	r18, 0x18	; 24
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18

0000099e <.Loc.38>:
WDTCR_REG->WDTCR_WDE=0;
     99e:	81 e4       	ldi	r24, 0x41	; 65
     9a0:	90 e0       	ldi	r25, 0x00	; 0

000009a2 <.Loc.39>:
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 81       	ld	r18, Z
     9a6:	27 7f       	andi	r18, 0xF7	; 247
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18

000009ac <.Loc.40>:
}
     9ac:	00 00       	nop
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <WDT_VoidSleep>:
void WDT_VoidSleep(u8 sleep_time )
{
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	0f 92       	push	r0
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	89 83       	std	Y+1, r24	; 0x01

000009c0 <.Loc.42>:

	//WDTCR_=(WDTCR_&0xF8) |sleep_time ;

	WDTCR_REG->WDTCR_WDP=sleep_time;
     9c0:	81 e4       	ldi	r24, 0x41	; 65
     9c2:	90 e0       	ldi	r25, 0x00	; 0

000009c4 <.Loc.43>:
     9c4:	29 81       	ldd	r18, Y+1	; 0x01
     9c6:	27 70       	andi	r18, 0x07	; 7
     9c8:	27 70       	andi	r18, 0x07	; 7
     9ca:	fc 01       	movw	r30, r24
     9cc:	30 81       	ld	r19, Z
     9ce:	38 7f       	andi	r19, 0xF8	; 248
     9d0:	23 2b       	or	r18, r19
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18

000009d6 <.Loc.44>:

}
     9d6:	00 00       	nop
     9d8:	0f 90       	pop	r0
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	2e 97       	sbiw	r28, 0x0e	; 14
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 ef       	ldi	r26, 0xF0	; 240
     9fa:	b1 e4       	ldi	r27, 0x41	; 65
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	ab 83       	std	Y+3, r26	; 0x03
     a02:	bc 83       	std	Y+4, r27	; 0x04

00000a04 <.LBB24>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	4a e7       	ldi	r20, 0x7A	; 122
     a0a:	53 e4       	ldi	r21, 0x43	; 67
     a0c:	69 81       	ldd	r22, Y+1	; 0x01
     a0e:	7a 81       	ldd	r23, Y+2	; 0x02
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     a18:	dc 01       	movw	r26, r24
     a1a:	cb 01       	movw	r24, r22
     a1c:	8d 83       	std	Y+5, r24	; 0x05
     a1e:	9e 83       	std	Y+6, r25	; 0x06
     a20:	af 83       	std	Y+7, r26	; 0x07
     a22:	b8 87       	std	Y+8, r27	; 0x08

00000a24 <.Loc.2>:
	if (__tmp < 1.0)
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e8       	ldi	r20, 0x80	; 128
     a2a:	5f e3       	ldi	r21, 0x3F	; 63
     a2c:	6d 81       	ldd	r22, Y+5	; 0x05
     a2e:	7e 81       	ldd	r23, Y+6	; 0x06
     a30:	8f 81       	ldd	r24, Y+7	; 0x07
     a32:	98 85       	ldd	r25, Y+8	; 0x08
     a34:	0e 94 ba 10 	call	0x2174	; 0x2174 <__cmpsf2>
     a38:	81 15       	cp	r24, r1
     a3a:	2c f4       	brge	.+10     	; 0xa46 <.L12>

00000a3c <.Loc.3>:
		__ticks = 1;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	9a 87       	std	Y+10, r25	; 0x0a
     a42:	89 87       	std	Y+9, r24	; 0x09
     a44:	40 c0       	rjmp	.+128    	; 0xac6 <.L4>

00000a46 <.L12>:
	else if (__tmp > 65535)
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	3f ef       	ldi	r19, 0xFF	; 255
     a4a:	4f e7       	ldi	r20, 0x7F	; 127
     a4c:	57 e4       	ldi	r21, 0x47	; 71
     a4e:	6d 81       	ldd	r22, Y+5	; 0x05
     a50:	7e 81       	ldd	r23, Y+6	; 0x06
     a52:	8f 81       	ldd	r24, Y+7	; 0x07
     a54:	98 85       	ldd	r25, Y+8	; 0x08
     a56:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	54 f1       	brlt	.+84     	; 0xab2 <.L13>

00000a5e <.Loc.5>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e2       	ldi	r20, 0x20	; 32
     a64:	51 e4       	ldi	r21, 0x41	; 65
     a66:	69 81       	ldd	r22, Y+1	; 0x01
     a68:	7a 81       	ldd	r23, Y+2	; 0x02
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	9c 81       	ldd	r25, Y+4	; 0x04
     a6e:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22

00000a76 <.Loc.6>:
     a76:	bc 01       	movw	r22, r24
     a78:	cd 01       	movw	r24, r26
     a7a:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	9a 87       	std	Y+10, r25	; 0x0a
     a84:	89 87       	std	Y+9, r24	; 0x09

00000a86 <.Loc.7>:
		while(__ticks)
     a86:	10 c0       	rjmp	.+32     	; 0xaa8 <.L7>

00000a88 <.L8>:
     a88:	89 e1       	ldi	r24, 0x19	; 25
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	9c 87       	std	Y+12, r25	; 0x0c
     a8e:	8b 87       	std	Y+11, r24	; 0x0b

00000a90 <.LBB26>:
		"   sbci %B0,0" "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
     a90:	8b 85       	ldd	r24, Y+11	; 0x0b
     a92:	9c 85       	ldd	r25, Y+12	; 0x0c

00000a94 <.L1^B1>:
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <.L1^B1>
     a98:	9c 87       	std	Y+12, r25	; 0x0c
     a9a:	8b 87       	std	Y+11, r24	; 0x0b

00000a9c <.Loc.9>:
	...

00000a9e <.LBE26>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a9e:	89 85       	ldd	r24, Y+9	; 0x09
     aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9a 87       	std	Y+10, r25	; 0x0a
     aa6:	89 87       	std	Y+9, r24	; 0x09

00000aa8 <.L7>:
		while(__ticks)
     aa8:	89 85       	ldd	r24, Y+9	; 0x09
     aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	61 f7       	brne	.-40     	; 0xa88 <.L8>

00000ab0 <.Loc.12>:
		}
		return;
     ab0:	15 c0       	rjmp	.+42     	; 0xadc <.L9>

00000ab2 <.L13>:
	}
	else
		__ticks = (uint16_t)__tmp;
     ab2:	6d 81       	ldd	r22, Y+5	; 0x05
     ab4:	7e 81       	ldd	r23, Y+6	; 0x06
     ab6:	8f 81       	ldd	r24, Y+7	; 0x07
     ab8:	98 85       	ldd	r25, Y+8	; 0x08
     aba:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	9a 87       	std	Y+10, r25	; 0x0a
     ac4:	89 87       	std	Y+9, r24	; 0x09

00000ac6 <.L4>:
     ac6:	89 85       	ldd	r24, Y+9	; 0x09
     ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aca:	9e 87       	std	Y+14, r25	; 0x0e
     acc:	8d 87       	std	Y+13, r24	; 0x0d

00000ace <.LBB28>:
     ace:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad0:	9e 85       	ldd	r25, Y+14	; 0x0e

00000ad2 <.L1^B2>:
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <.L1^B2>
     ad6:	9e 87       	std	Y+14, r25	; 0x0e
     ad8:	8d 87       	std	Y+13, r24	; 0x0d

00000ada <.Loc.15>:
	...

00000adc <.L9>:
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	66 e0       	ldi	r22, 0x06	; 6
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

00000ae6 <.Loc.17>:
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	67 e0       	ldi	r22, 0x07	; 7
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

00000af0 <.Loc.18>:

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	62 e0       	ldi	r22, 0x02	; 2
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

00000afa <.Loc.19>:
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
     afa:	41 e0       	ldi	r20, 0x01	; 1
     afc:	63 e0       	ldi	r22, 0x03	; 3
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

00000b04 <.Loc.20>:
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	64 e0       	ldi	r22, 0x04	; 4
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

00000b0e <.Loc.21>:
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
     b0e:	41 e0       	ldi	r20, 0x01	; 1
     b10:	65 e0       	ldi	r22, 0x05	; 5
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

00000b18 <.Loc.22>:

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_voidWriteCommand>

00000b1e <.Loc.23>:

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
     b1e:	88 e2       	ldi	r24, 0x28	; 40
     b20:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_voidWriteCommand>

00000b24 <.Loc.24>:

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
     b24:	8c e0       	ldi	r24, 0x0C	; 12
     b26:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_voidWriteCommand>

00000b2a <.Loc.25>:

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_voidWriteCommand>

00000b30 <.Loc.26>:

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
     b30:	86 e0       	ldi	r24, 0x06	; 6
     b32:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_voidWriteCommand>

00000b36 <.Loc.27>:

}
     b36:	00 00       	nop
     b38:	2e 96       	adiw	r28, 0x0e	; 14
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	6d 97       	sbiw	r28, 0x1d	; 29
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	8d 8f       	std	Y+29, r24	; 0x1d

00000b60 <.Loc.29>:



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN7) );
     b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b62:	87 fb       	bst	r24, 7
     b64:	88 27       	eor	r24, r24
     b66:	80 f9       	bld	r24, 0
     b68:	48 2f       	mov	r20, r24
     b6a:	65 e0       	ldi	r22, 0x05	; 5
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000b72 <.Loc.30>:
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN6) );
     b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b74:	82 95       	swap	r24
     b76:	86 95       	lsr	r24
     b78:	86 95       	lsr	r24
     b7a:	83 70       	andi	r24, 0x03	; 3

00000b7c <.Loc.31>:
     b7c:	81 70       	andi	r24, 0x01	; 1
     b7e:	48 2f       	mov	r20, r24
     b80:	64 e0       	ldi	r22, 0x04	; 4
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000b88 <.Loc.32>:
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN5) );
     b88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b8a:	82 95       	swap	r24
     b8c:	86 95       	lsr	r24
     b8e:	87 70       	andi	r24, 0x07	; 7

00000b90 <.Loc.33>:
     b90:	81 70       	andi	r24, 0x01	; 1
     b92:	48 2f       	mov	r20, r24
     b94:	63 e0       	ldi	r22, 0x03	; 3
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000b9c <.Loc.34>:
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN4) );
     b9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b9e:	82 95       	swap	r24
     ba0:	8f 70       	andi	r24, 0x0F	; 15

00000ba2 <.Loc.35>:
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	48 2f       	mov	r20, r24
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000bae <.Loc.36>:

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	67 e0       	ldi	r22, 0x07	; 7
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e4       	ldi	r27, 0x40	; 64
     bc0:	8f 87       	std	Y+15, r24	; 0x0f
     bc2:	98 8b       	std	Y+16, r25	; 0x10
     bc4:	a9 8b       	std	Y+17, r26	; 0x11
     bc6:	ba 8b       	std	Y+18, r27	; 0x12

00000bc8 <.LBB30>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	4a e7       	ldi	r20, 0x7A	; 122
     bce:	53 e4       	ldi	r21, 0x43	; 67
     bd0:	6f 85       	ldd	r22, Y+15	; 0x0f
     bd2:	78 89       	ldd	r23, Y+16	; 0x10
     bd4:	89 89       	ldd	r24, Y+17	; 0x11
     bd6:	9a 89       	ldd	r25, Y+18	; 0x12
     bd8:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	8b 8b       	std	Y+19, r24	; 0x13
     be2:	9c 8b       	std	Y+20, r25	; 0x14
     be4:	ad 8b       	std	Y+21, r26	; 0x15
     be6:	be 8b       	std	Y+22, r27	; 0x16

00000be8 <.Loc.38>:
	if (__tmp < 1.0)
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	6b 89       	ldd	r22, Y+19	; 0x13
     bf2:	7c 89       	ldd	r23, Y+20	; 0x14
     bf4:	8d 89       	ldd	r24, Y+21	; 0x15
     bf6:	9e 89       	ldd	r25, Y+22	; 0x16
     bf8:	0e 94 ba 10 	call	0x2174	; 0x2174 <__cmpsf2>
     bfc:	81 15       	cp	r24, r1
     bfe:	2c f4       	brge	.+10     	; 0xc0a <.L35>

00000c00 <.Loc.39>:
		__ticks = 1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	98 8f       	std	Y+24, r25	; 0x18
     c06:	8f 8b       	std	Y+23, r24	; 0x17
     c08:	40 c0       	rjmp	.+128    	; 0xc8a <.L17>

00000c0a <.L35>:
	else if (__tmp > 65535)
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	4f e7       	ldi	r20, 0x7F	; 127
     c10:	57 e4       	ldi	r21, 0x47	; 71
     c12:	6b 89       	ldd	r22, Y+19	; 0x13
     c14:	7c 89       	ldd	r23, Y+20	; 0x14
     c16:	8d 89       	ldd	r24, Y+21	; 0x15
     c18:	9e 89       	ldd	r25, Y+22	; 0x16
     c1a:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	54 f1       	brlt	.+84     	; 0xc76 <.L36>

00000c22 <.Loc.41>:
		__ticks = (uint16_t) (__ms * 10.0);
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e2       	ldi	r20, 0x20	; 32
     c28:	51 e4       	ldi	r21, 0x41	; 65
     c2a:	6f 85       	ldd	r22, Y+15	; 0x0f
     c2c:	78 89       	ldd	r23, Y+16	; 0x10
     c2e:	89 89       	ldd	r24, Y+17	; 0x11
     c30:	9a 89       	ldd	r25, Y+18	; 0x12
     c32:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22

00000c3a <.Loc.42>:
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	98 8f       	std	Y+24, r25	; 0x18
     c48:	8f 8b       	std	Y+23, r24	; 0x17

00000c4a <.Loc.43>:
		while(__ticks)
     c4a:	10 c0       	rjmp	.+32     	; 0xc6c <.L20>

00000c4c <.L21>:
     c4c:	89 e1       	ldi	r24, 0x19	; 25
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	9a 8f       	std	Y+26, r25	; 0x1a
     c52:	89 8f       	std	Y+25, r24	; 0x19

00000c54 <.LBB32>:
     c54:	89 8d       	ldd	r24, Y+25	; 0x19
     c56:	9a 8d       	ldd	r25, Y+26	; 0x1a

00000c58 <.L1^B3>:
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <.L1^B3>
     c5c:	9a 8f       	std	Y+26, r25	; 0x1a
     c5e:	89 8f       	std	Y+25, r24	; 0x19

00000c60 <.Loc.45>:
	...

00000c62 <.LBE32>:
			__ticks --;
     c62:	8f 89       	ldd	r24, Y+23	; 0x17
     c64:	98 8d       	ldd	r25, Y+24	; 0x18
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	98 8f       	std	Y+24, r25	; 0x18
     c6a:	8f 8b       	std	Y+23, r24	; 0x17

00000c6c <.L20>:
		while(__ticks)
     c6c:	8f 89       	ldd	r24, Y+23	; 0x17
     c6e:	98 8d       	ldd	r25, Y+24	; 0x18
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	61 f7       	brne	.-40     	; 0xc4c <.L21>

00000c74 <.Loc.48>:
		return;
     c74:	15 c0       	rjmp	.+42     	; 0xca0 <.L22>

00000c76 <.L36>:
		__ticks = (uint16_t)__tmp;
     c76:	6b 89       	ldd	r22, Y+19	; 0x13
     c78:	7c 89       	ldd	r23, Y+20	; 0x14
     c7a:	8d 89       	ldd	r24, Y+21	; 0x15
     c7c:	9e 89       	ldd	r25, Y+22	; 0x16
     c7e:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	98 8f       	std	Y+24, r25	; 0x18
     c88:	8f 8b       	std	Y+23, r24	; 0x17

00000c8a <.L17>:
     c8a:	8f 89       	ldd	r24, Y+23	; 0x17
     c8c:	98 8d       	ldd	r25, Y+24	; 0x18
     c8e:	9c 8f       	std	Y+28, r25	; 0x1c
     c90:	8b 8f       	std	Y+27, r24	; 0x1b

00000c92 <.LBB34>:
     c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c94:	9c 8d       	ldd	r25, Y+28	; 0x1c

00000c96 <.L1^B4>:
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <.L1^B4>
     c9a:	9c 8f       	std	Y+28, r25	; 0x1c
     c9c:	8b 8f       	std	Y+27, r24	; 0x1b

00000c9e <.Loc.51>:
	...

00000ca0 <.L22>:
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	67 e0       	ldi	r22, 0x07	; 7
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000caa <.Loc.53>:


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN3) );
     caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cac:	86 95       	lsr	r24
     cae:	86 95       	lsr	r24
     cb0:	86 95       	lsr	r24

00000cb2 <.Loc.54>:
     cb2:	81 70       	andi	r24, 0x01	; 1
     cb4:	48 2f       	mov	r20, r24
     cb6:	65 e0       	ldi	r22, 0x05	; 5
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000cbe <.Loc.55>:
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN2) );
     cbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cc0:	86 95       	lsr	r24
     cc2:	86 95       	lsr	r24

00000cc4 <.Loc.56>:
     cc4:	81 70       	andi	r24, 0x01	; 1
     cc6:	48 2f       	mov	r20, r24
     cc8:	64 e0       	ldi	r22, 0x04	; 4
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000cd0 <.Loc.57>:
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN1) );
     cd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cd2:	86 95       	lsr	r24

00000cd4 <.Loc.58>:
     cd4:	81 70       	andi	r24, 0x01	; 1
     cd6:	48 2f       	mov	r20, r24
     cd8:	63 e0       	ldi	r22, 0x03	; 3
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000ce0 <.Loc.59>:
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN0) );
     ce0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ce2:	81 70       	andi	r24, 0x01	; 1
     ce4:	48 2f       	mov	r20, r24
     ce6:	62 e0       	ldi	r22, 0x02	; 2
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000cee <.Loc.60>:

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	67 e0       	ldi	r22, 0x07	; 7
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	a0 e0       	ldi	r26, 0x00	; 0
     cfe:	b0 e4       	ldi	r27, 0x40	; 64
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	ab 83       	std	Y+3, r26	; 0x03
     d06:	bc 83       	std	Y+4, r27	; 0x04

00000d08 <.LBB36>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	4a e7       	ldi	r20, 0x7A	; 122
     d0e:	53 e4       	ldi	r21, 0x43	; 67
     d10:	69 81       	ldd	r22, Y+1	; 0x01
     d12:	7a 81       	ldd	r23, Y+2	; 0x02
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	8d 83       	std	Y+5, r24	; 0x05
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	af 83       	std	Y+7, r26	; 0x07
     d26:	b8 87       	std	Y+8, r27	; 0x08

00000d28 <.Loc.62>:
	if (__tmp < 1.0)
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e8       	ldi	r20, 0x80	; 128
     d2e:	5f e3       	ldi	r21, 0x3F	; 63
     d30:	6d 81       	ldd	r22, Y+5	; 0x05
     d32:	7e 81       	ldd	r23, Y+6	; 0x06
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	98 85       	ldd	r25, Y+8	; 0x08
     d38:	0e 94 ba 10 	call	0x2174	; 0x2174 <__cmpsf2>
     d3c:	81 15       	cp	r24, r1
     d3e:	2c f4       	brge	.+10     	; 0xd4a <.L37>

00000d40 <.Loc.63>:
		__ticks = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	9a 87       	std	Y+10, r25	; 0x0a
     d46:	89 87       	std	Y+9, r24	; 0x09
     d48:	40 c0       	rjmp	.+128    	; 0xdca <.L25>

00000d4a <.L37>:
	else if (__tmp > 65535)
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	3f ef       	ldi	r19, 0xFF	; 255
     d4e:	4f e7       	ldi	r20, 0x7F	; 127
     d50:	57 e4       	ldi	r21, 0x47	; 71
     d52:	6d 81       	ldd	r22, Y+5	; 0x05
     d54:	7e 81       	ldd	r23, Y+6	; 0x06
     d56:	8f 81       	ldd	r24, Y+7	; 0x07
     d58:	98 85       	ldd	r25, Y+8	; 0x08
     d5a:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	54 f1       	brlt	.+84     	; 0xdb6 <.L38>

00000d62 <.Loc.65>:
		__ticks = (uint16_t) (__ms * 10.0);
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e2       	ldi	r20, 0x20	; 32
     d68:	51 e4       	ldi	r21, 0x41	; 65
     d6a:	69 81       	ldd	r22, Y+1	; 0x01
     d6c:	7a 81       	ldd	r23, Y+2	; 0x02
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22

00000d7a <.Loc.66>:
     d7a:	bc 01       	movw	r22, r24
     d7c:	cd 01       	movw	r24, r26
     d7e:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	9a 87       	std	Y+10, r25	; 0x0a
     d88:	89 87       	std	Y+9, r24	; 0x09

00000d8a <.Loc.67>:
		while(__ticks)
     d8a:	10 c0       	rjmp	.+32     	; 0xdac <.L28>

00000d8c <.L29>:
     d8c:	89 e1       	ldi	r24, 0x19	; 25
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9c 87       	std	Y+12, r25	; 0x0c
     d92:	8b 87       	std	Y+11, r24	; 0x0b

00000d94 <.LBB38>:
     d94:	8b 85       	ldd	r24, Y+11	; 0x0b
     d96:	9c 85       	ldd	r25, Y+12	; 0x0c

00000d98 <.L1^B5>:
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <.L1^B5>
     d9c:	9c 87       	std	Y+12, r25	; 0x0c
     d9e:	8b 87       	std	Y+11, r24	; 0x0b

00000da0 <.Loc.69>:
	...

00000da2 <.LBE38>:
			__ticks --;
     da2:	89 85       	ldd	r24, Y+9	; 0x09
     da4:	9a 85       	ldd	r25, Y+10	; 0x0a
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	9a 87       	std	Y+10, r25	; 0x0a
     daa:	89 87       	std	Y+9, r24	; 0x09

00000dac <.L28>:
		while(__ticks)
     dac:	89 85       	ldd	r24, Y+9	; 0x09
     dae:	9a 85       	ldd	r25, Y+10	; 0x0a
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	61 f7       	brne	.-40     	; 0xd8c <.L29>

00000db4 <.Loc.72>:
		return;
     db4:	15 c0       	rjmp	.+42     	; 0xde0 <.L30>

00000db6 <.L38>:
		__ticks = (uint16_t)__tmp;
     db6:	6d 81       	ldd	r22, Y+5	; 0x05
     db8:	7e 81       	ldd	r23, Y+6	; 0x06
     dba:	8f 81       	ldd	r24, Y+7	; 0x07
     dbc:	98 85       	ldd	r25, Y+8	; 0x08
     dbe:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	9a 87       	std	Y+10, r25	; 0x0a
     dc8:	89 87       	std	Y+9, r24	; 0x09

00000dca <.L25>:
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	9e 87       	std	Y+14, r25	; 0x0e
     dd0:	8d 87       	std	Y+13, r24	; 0x0d

00000dd2 <.LBB40>:
     dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd4:	9e 85       	ldd	r25, Y+14	; 0x0e

00000dd6 <.L1^B6>:
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <.L1^B6>
     dda:	9e 87       	std	Y+14, r25	; 0x0e
     ddc:	8d 87       	std	Y+13, r24	; 0x0d

00000dde <.Loc.75>:
	...

00000de0 <.L30>:
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	67 e0       	ldi	r22, 0x07	; 7
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000dea <.Loc.77>:




}
     dea:	00 00       	nop
     dec:	6d 96       	adiw	r28, 0x1d	; 29
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	89 83       	std	Y+1, r24	; 0x01

00000e0a <.Loc.79>:
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	66 e0       	ldi	r22, 0x06	; 6
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000e14 <.Loc.80>:

	LCD_voidWriteBitsToSend(copy_u8data);
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_voidWriteBitsToSend>

00000e1a <.Loc.81>:
}
     e1a:	00 00       	nop
     e1c:	0f 90       	pop	r0
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	0f 92       	push	r0
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	89 83       	std	Y+1, r24	; 0x01

00000e30 <.Loc.83>:
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	66 e0       	ldi	r22, 0x06	; 6
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00000e3a <.Loc.84>:


	LCD_voidWriteBitsToSend(copy_u8Command);
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_voidWriteBitsToSend>

00000e40 <.Loc.85>:
}
     e40:	00 00       	nop
     e42:	0f 90       	pop	r0
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	08 95       	ret

00000e4a <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <L0^A>

00000e50 <L0^A>:
     e50:	00 d0       	rcall	.+0      	; 0xe52 <L0^A>

00000e52 <L0^A>:
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	9c 83       	std	Y+4, r25	; 0x04
     e58:	8b 83       	std	Y+3, r24	; 0x03

00000e5a <.Loc.87>:

	u16 i= ZERO;
     e5a:	1a 82       	std	Y+2, r1	; 0x02
     e5c:	19 82       	std	Y+1, r1	; 0x01

00000e5e <.Loc.88>:
	while(copy_str[i] != '\0')
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <.L42>

00000e60 <.L43>:
	{
		LCD_voidWriteData(copy_str[i]);
     e60:	2b 81       	ldd	r18, Y+3	; 0x03
     e62:	3c 81       	ldd	r19, Y+4	; 0x04
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19

00000e6c <.Loc.90>:
     e6c:	fc 01       	movw	r30, r24
     e6e:	80 81       	ld	r24, Z
     e70:	0e 94 ff 06 	call	0xdfe	; 0xdfe <LCD_voidWriteData>

00000e74 <.Loc.91>:
		i++;
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01

00000e7e <.L42>:
	while(copy_str[i] != '\0')
     e7e:	2b 81       	ldd	r18, Y+3	; 0x03
     e80:	3c 81       	ldd	r19, Y+4	; 0x04
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	82 0f       	add	r24, r18
     e88:	93 1f       	adc	r25, r19
     e8a:	fc 01       	movw	r30, r24
     e8c:	80 81       	ld	r24, Z

00000e8e <.Loc.93>:
     e8e:	81 15       	cp	r24, r1
     e90:	39 f7       	brne	.-50     	; 0xe60 <.L43>

00000e92 <.Loc.94>:
	}
}
     e92:	00 00       	nop
     e94:	00 00       	nop
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <L0^A>

00000eaa <L0^A>:
     eaa:	00 d0       	rcall	.+0      	; 0xeac <L0^A>

00000eac <L0^A>:
     eac:	00 d0       	rcall	.+0      	; 0xeae <L0^A>

00000eae <L0^A>:
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	8e 83       	std	Y+6, r24	; 0x06
     eb6:	6f 83       	std	Y+7, r22	; 0x07

00000eb8 <.Loc.96>:
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e4       	ldi	r25, 0x40	; 64
     ebc:	9b 83       	std	Y+3, r25	; 0x03
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	84 e1       	ldi	r24, 0x14	; 20
     ec2:	94 e5       	ldi	r25, 0x54	; 84
     ec4:	9d 83       	std	Y+5, r25	; 0x05
     ec6:	8c 83       	std	Y+4, r24	; 0x04

00000ec8 <.Loc.97>:

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
     ec8:	8e 81       	ldd	r24, Y+6	; 0x06
     eca:	88 2f       	mov	r24, r24
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 01       	movw	r18, r28
     ed0:	2e 5f       	subi	r18, 0xFE	; 254
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	82 0f       	add	r24, r18
     ed6:	93 1f       	adc	r25, r19
     ed8:	fc 01       	movw	r30, r24
     eda:	90 81       	ld	r25, Z

00000edc <.Loc.98>:
     edc:	8f 81       	ldd	r24, Y+7	; 0x07
     ede:	89 0f       	add	r24, r25

00000ee0 <.Loc.99>:
     ee0:	80 58       	subi	r24, 0x80	; 128
     ee2:	89 83       	std	Y+1, r24	; 0x01

00000ee4 <.Loc.100>:

	LCD_voidWriteCommand(local_address) ;
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_voidWriteCommand>

00000eea <.Loc.101>:

}
     eea:	00 00       	nop
     eec:	27 96       	adiw	r28, 0x07	; 7
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <LCD_voidClear>:
}
 */
/***********************************************************************************/

void LCD_voidClear(void)
{
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62

00000f06 <.Loc.103>:
	LCD_voidWriteCommand( DISPLAY_CLEAR);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_voidWriteCommand>

00000f0c <.Loc.104>:

}
     f0c:	00 00       	nop
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	63 97       	sbiw	r28, 0x13	; 19
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	68 8b       	std	Y+16, r22	; 0x10
     f2e:	79 8b       	std	Y+17, r23	; 0x11
     f30:	8a 8b       	std	Y+18, r24	; 0x12
     f32:	9b 8b       	std	Y+19, r25	; 0x13

00000f34 <.Loc.106>:
	u32 LOCAL_NUMBER=Copy_u8num ;
     f34:	88 89       	ldd	r24, Y+16	; 0x10
     f36:	99 89       	ldd	r25, Y+17	; 0x11
     f38:	aa 89       	ldd	r26, Y+18	; 0x12
     f3a:	bb 89       	ldd	r27, Y+19	; 0x13
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	ab 83       	std	Y+3, r26	; 0x03
     f42:	bc 83       	std	Y+4, r27	; 0x04

00000f44 <.Loc.107>:
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
     f44:	1d 82       	std	Y+5, r1	; 0x05

00000f46 <.L47>:


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	ab 81       	ldd	r26, Y+3	; 0x03
     f4c:	bc 81       	ldd	r27, Y+4	; 0x04
     f4e:	0a e0       	ldi	r16, 0x0A	; 10
     f50:	10 e0       	ldi	r17, 0x00	; 0
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	a9 01       	movw	r20, r18
     f5c:	98 01       	movw	r18, r16
     f5e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__udivmodsi4>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22

00000f66 <.Loc.109>:
     f66:	28 2f       	mov	r18, r24

00000f68 <.Loc.110>:
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0

00000f6e <.Loc.111>:
     f6e:	40 e3       	ldi	r20, 0x30	; 48
     f70:	42 0f       	add	r20, r18

00000f72 <.Loc.112>:
     f72:	9e 01       	movw	r18, r28
     f74:	2a 5f       	subi	r18, 0xFA	; 250
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	82 0f       	add	r24, r18
     f7a:	93 1f       	adc	r25, r19
     f7c:	fc 01       	movw	r30, r24
     f7e:	40 83       	st	Z, r20

00000f80 <.Loc.113>:
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	ab 81       	ldd	r26, Y+3	; 0x03
     f86:	bc 81       	ldd	r27, Y+4	; 0x04
     f88:	0a e0       	ldi	r16, 0x0A	; 10
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	a9 01       	movw	r20, r18
     f96:	98 01       	movw	r18, r16
     f98:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__udivmodsi4>
     f9c:	da 01       	movw	r26, r20
     f9e:	c9 01       	movw	r24, r18
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	ab 83       	std	Y+3, r26	; 0x03
     fa6:	bc 83       	std	Y+4, r27	; 0x04

00000fa8 <.Loc.114>:
		i++ ;
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	8d 83       	std	Y+5, r24	; 0x05

00000fae <.Loc.115>:
	}
	while(LOCAL_NUMBER!=ZERO);
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	ab 81       	ldd	r26, Y+3	; 0x03
     fb4:	bc 81       	ldd	r27, Y+4	; 0x04
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	a1 05       	cpc	r26, r1
     fba:	b1 05       	cpc	r27, r1
     fbc:	21 f6       	brne	.-120    	; 0xf46 <.L47>

00000fbe <.Loc.116>:


	for(;i>0;i--)
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <.L48>

00000fc0 <.L49>:
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	01 97       	sbiw	r24, 0x01	; 1

00000fc8 <.Loc.118>:
     fc8:	9e 01       	movw	r18, r28
     fca:	2a 5f       	subi	r18, 0xFA	; 250
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	82 0f       	add	r24, r18
     fd0:	93 1f       	adc	r25, r19
     fd2:	fc 01       	movw	r30, r24
     fd4:	80 81       	ld	r24, Z
     fd6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <LCD_voidWriteData>

00000fda <.Loc.119>:
	for(;i>0;i--)
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	81 50       	subi	r24, 0x01	; 1
     fde:	8d 83       	std	Y+5, r24	; 0x05

00000fe0 <.L48>:
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	81 15       	cp	r24, r1
     fe4:	69 f7       	brne	.-38     	; 0xfc0 <.L49>

00000fe6 <.Loc.121>:
	}



}
     fe6:	00 00       	nop
     fe8:	00 00       	nop
     fea:	63 96       	adiw	r28, 0x13	; 19
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	00 d0       	rcall	.+0      	; 0x1006 <L0^A>

00001006 <L0^A>:
    1006:	00 d0       	rcall	.+0      	; 0x1008 <L0^A>

00001008 <L0^A>:
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	6d 83       	std	Y+5, r22	; 0x05

00001014 <.Loc.123>:
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    1014:	19 82       	std	Y+1, r1	; 0x01

00001016 <.Loc.124>:

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	88 5f       	subi	r24, 0xF8	; 248
    101a:	88 0f       	add	r24, r24
    101c:	88 0f       	add	r24, r24
    101e:	88 0f       	add	r24, r24
    1020:	8a 83       	std	Y+2, r24	; 0x02

00001022 <.Loc.125>:

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_voidWriteCommand>

00001028 <.Loc.126>:


	for(counter=ZERO;counter<EIGHT;counter++)
    1028:	19 82       	std	Y+1, r1	; 0x01

0000102a <.Loc.127>:
    102a:	0e c0       	rjmp	.+28     	; 0x1048 <.L51>

0000102c <.L52>:
	{
		LCD_voidWriteData(copy_u8data[counter]);
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	2b 81       	ldd	r18, Y+3	; 0x03
    1034:	3c 81       	ldd	r19, Y+4	; 0x04
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19

0000103a <.Loc.129>:
    103a:	fc 01       	movw	r30, r24
    103c:	80 81       	ld	r24, Z
    103e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <LCD_voidWriteData>

00001042 <.Loc.130>:
	for(counter=ZERO;counter<EIGHT;counter++)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	89 83       	std	Y+1, r24	; 0x01

00001048 <.L51>:
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	78 f3       	brcs	.-34     	; 0x102c <.L52>

0000104e <.Loc.132>:
	}

}
    104e:	00 00       	nop
    1050:	00 00       	nop
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	0f 92       	push	r0
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	89 83       	std	Y+1, r24	; 0x01

0000106e <.Loc.134>:

	LCD_voidWriteData(copy_u8ByteNum);
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	0e 94 ff 06 	call	0xdfe	; 0xdfe <LCD_voidWriteData>

00001074 <.Loc.135>:

}
    1074:	00 00       	nop
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <KPD_voidInit>:
 *                             Public Function Definition                            *
 *************************************************************************************/


void KPD_voidInit(void)
{
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62

00001088 <.Loc.1>:

	u8 counter = ZERO ;
    1088:	19 82       	std	Y+1, r1	; 0x01

0000108a <.Loc.2>:

	for( counter=ZERO ; counter<ROW_SIZE ; counter++ )
    108a:	19 82       	std	Y+1, r1	; 0x01

0000108c <.Loc.3>:
    108c:	27 c0       	rjmp	.+78     	; 0x10dc <.L2>

0000108e <.L3>:
	{
		DIO_voidSetPinDirection( arr_ROW_port[counter] , arr_ROW_pins[counter] , PIN_OUTPUT ) ;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	88 59       	subi	r24, 0x98	; 152
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	fc 01       	movw	r30, r24
    109a:	20 81       	ld	r18, Z
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	84 59       	subi	r24, 0x94	; 148
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	fc 01       	movw	r30, r24
    10a8:	80 81       	ld	r24, Z
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	62 2f       	mov	r22, r18
    10ae:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

000010b2 <.Loc.5>:
		DIO_voidSetPinValue( arr_ROW_port[counter] , arr_ROW_pins[counter] , PIN_HIGH ) ;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	88 59       	subi	r24, 0x98	; 152
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	fc 01       	movw	r30, r24
    10be:	20 81       	ld	r18, Z
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	84 59       	subi	r24, 0x94	; 148
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	fc 01       	movw	r30, r24
    10cc:	80 81       	ld	r24, Z
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	62 2f       	mov	r22, r18
    10d2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

000010d6 <.Loc.6>:
	for( counter=ZERO ; counter<ROW_SIZE ; counter++ )
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	89 83       	std	Y+1, r24	; 0x01

000010dc <.L2>:
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	b0 f2       	brcs	.-84     	; 0x108e <.L3>

000010e2 <.Loc.8>:
	}

	for( counter=ZERO ; counter<COL_SIZE ; counter++ )
    10e2:	19 82       	std	Y+1, r1	; 0x01

000010e4 <.Loc.9>:
    10e4:	27 c0       	rjmp	.+78     	; 0x1134 <.L4>

000010e6 <.L5>:
	{

		DIO_voidSetPinDirection( arr_COL_port[counter] , arr_COL_pins[counter] , PIN_INPUT ) ;
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	80 5a       	subi	r24, 0xA0	; 160
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 81       	ld	r18, Z
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	8c 59       	subi	r24, 0x9C	; 156
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	fc 01       	movw	r30, r24
    1100:	80 81       	ld	r24, Z
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	62 2f       	mov	r22, r18
    1106:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

0000110a <.Loc.11>:
		DIO_voidSetPinValue( arr_COL_port[counter] ,arr_COL_pins[counter] , PIN_HIGH ) ;
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	80 5a       	subi	r24, 0xA0	; 160
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	fc 01       	movw	r30, r24
    1116:	20 81       	ld	r18, Z
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	8c 59       	subi	r24, 0x9C	; 156
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	fc 01       	movw	r30, r24
    1124:	80 81       	ld	r24, Z
    1126:	41 e0       	ldi	r20, 0x01	; 1
    1128:	62 2f       	mov	r22, r18
    112a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

0000112e <.Loc.12>:
	for( counter=ZERO ; counter<COL_SIZE ; counter++ )
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	8f 5f       	subi	r24, 0xFF	; 255
    1132:	89 83       	std	Y+1, r24	; 0x01

00001134 <.L4>:
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	b0 f2       	brcs	.-84     	; 0x10e6 <.L5>

0000113a <.Loc.14>:

	}


}
    113a:	00 00       	nop
    113c:	00 00       	nop
    113e:	0f 90       	pop	r0
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <KPD_voidGetPressedKey>:


/*****************************************************************************************/
u8 KPD_voidGetPressedKey(void)
{
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	64 97       	sbiw	r28, 0x14	; 20
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61

0000115a <.Loc.16>:
	u8 counter1 ;                 //counter loop1
	u8 counter2 ;                 //counter loop2
	u8 get_key=KPD_NOT_PRESSED ;  //init val
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	8b 83       	std	Y+3, r24	; 0x03

0000115e <.Loc.17>:
	u8 pin_val ;                  // to get val of pin if 0 or 1

	u8 SwitchVal[ROW_SIZE][COL_SIZE] = KEYPAD_ARR_VAL ;
    115e:	80 e1       	ldi	r24, 0x10	; 16
    1160:	e0 e7       	ldi	r30, 0x70	; 112
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	de 01       	movw	r26, r28
    1166:	15 96       	adiw	r26, 0x05	; 5

00001168 <.L0^B1>:
    1168:	01 90       	ld	r0, Z+
    116a:	0d 92       	st	X+, r0
    116c:	8a 95       	dec	r24
    116e:	e1 f7       	brne	.-8      	; 0x1168 <.L0^B1>

00001170 <.Loc.18>:

	for(counter1=ZERO ; counter1 < ROW_SIZE ; counter1++ )
    1170:	19 82       	std	Y+1, r1	; 0x01

00001172 <.Loc.19>:
    1172:	74 c0       	rjmp	.+232    	; 0x125c <.L7>

00001174 <.L16>:
	{
		DIO_voidSetPinValue(arr_ROW_port[counter1],arr_ROW_pins[counter1],PIN_LOW);
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	88 59       	subi	r24, 0x98	; 152
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	fc 01       	movw	r30, r24
    1180:	20 81       	ld	r18, Z
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	84 59       	subi	r24, 0x94	; 148
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	fc 01       	movw	r30, r24
    118e:	80 81       	ld	r24, Z
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	62 2f       	mov	r22, r18
    1194:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00001198 <.Loc.21>:

		for(counter2=ZERO ; counter2 < COL_SIZE ; counter2++ )
    1198:	1a 82       	std	Y+2, r1	; 0x02

0000119a <.Loc.22>:
    119a:	44 c0       	rjmp	.+136    	; 0x1224 <.L8>

0000119c <.L13>:
		{

			pin_val= DIO_u8GetBitValue( ( arr_COL_port[counter2] ) , (arr_COL_pins[counter2]) );
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	80 5a       	subi	r24, 0xA0	; 160
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 81       	ld	r18, Z
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	8c 59       	subi	r24, 0x9C	; 156
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	fc 01       	movw	r30, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	62 2f       	mov	r22, r18
    11ba:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_u8GetBitValue>
    11be:	8c 83       	std	Y+4, r24	; 0x04

000011c0 <.Loc.24>:

			if(pin_val==KPD_PRESSED)
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	81 15       	cp	r24, r1
    11c4:	61 f5       	brne	.+88     	; 0x121e <.L9>

000011c6 <.Loc.25>:
			{
				get_key=SwitchVal[counter1][counter2]  ;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0

000011d2 <.Loc.26>:
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	ae 01       	movw	r20, r28
    11dc:	4f 5f       	subi	r20, 0xFF	; 255
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	24 0f       	add	r18, r20
    11e2:	35 1f       	adc	r19, r21
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	04 96       	adiw	r24, 0x04	; 4
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	8b 83       	std	Y+3, r24	; 0x03

000011f0 <.Loc.27>:

				while(pin_val==KPD_PRESSED)
    11f0:	12 c0       	rjmp	.+36     	; 0x1216 <.L10>

000011f2 <.L11>:
				{
					pin_val=DIO_u8GetBitValue( ( arr_COL_port[counter2] ) , (arr_COL_pins[counter2]) );
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	80 5a       	subi	r24, 0xA0	; 160
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 81       	ld	r18, Z
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	8c 59       	subi	r24, 0x9C	; 156
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	fc 01       	movw	r30, r24
    120c:	80 81       	ld	r24, Z
    120e:	62 2f       	mov	r22, r18
    1210:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <DIO_u8GetBitValue>
    1214:	8c 83       	std	Y+4, r24	; 0x04

00001216 <.L10>:
				while(pin_val==KPD_PRESSED)
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	81 15       	cp	r24, r1
    121a:	59 f3       	breq	.-42     	; 0x11f2 <.L11>

0000121c <.Loc.30>:
				}

		   //DIO_voidSetPinValue(arr_ROW_port[counter1],arr_ROW_pins[counter1],PIN_HIGH);
		  //return get_key ;
				break ;
    121c:	07 c0       	rjmp	.+14     	; 0x122c <.L12>

0000121e <.L9>:
		for(counter2=ZERO ; counter2 < COL_SIZE ; counter2++ )
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	8f 5f       	subi	r24, 0xFF	; 255
    1222:	8a 83       	std	Y+2, r24	; 0x02

00001224 <.L8>:
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	08 f4       	brcc	.+2      	; 0x122c <.L12>

0000122a <L0^A>:
    122a:	b8 cf       	rjmp	.-144    	; 0x119c <.L13>

0000122c <.L12>:
			}

		}

		DIO_voidSetPinValue(arr_ROW_port[counter1],arr_ROW_pins[counter1],PIN_HIGH);
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	88 59       	subi	r24, 0x98	; 152
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	fc 01       	movw	r30, r24
    1238:	20 81       	ld	r18, Z
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	84 59       	subi	r24, 0x94	; 148
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	fc 01       	movw	r30, r24
    1246:	80 81       	ld	r24, Z
    1248:	41 e0       	ldi	r20, 0x01	; 1
    124a:	62 2f       	mov	r22, r18
    124c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00001250 <.Loc.34>:
		if(get_key!=0xff)
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	8f 3f       	cpi	r24, 0xFF	; 255
    1254:	41 f4       	brne	.+16     	; 0x1266 <.L18>

00001256 <.Loc.35>:
	for(counter1=ZERO ; counter1 < ROW_SIZE ; counter1++ )
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	89 83       	std	Y+1, r24	; 0x01

0000125c <.L7>:
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	08 f4       	brcc	.+2      	; 0x1264 <L0^A+0x2>

00001262 <L0^A>:
    1262:	88 cf       	rjmp	.-240    	; 0x1174 <.L16>
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <.L15>

00001266 <.L18>:
	...

00001268 <.L15>:


	}


	return get_key;
    1268:	8b 81       	ldd	r24, Y+3	; 0x03

0000126a <.Loc.39>:
}
    126a:	64 96       	adiw	r28, 0x14	; 20
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62

00001284 <.Loc.1>:
     SET_BIT(GIE_SREG,I_bit);
    1284:	8f e5       	ldi	r24, 0x5F	; 95
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	fc 01       	movw	r30, r24
    128a:	20 81       	ld	r18, Z
    128c:	8f e5       	ldi	r24, 0x5F	; 95
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	20 68       	ori	r18, 0x80	; 128
    1292:	fc 01       	movw	r30, r24
    1294:	20 83       	st	Z, r18

00001296 <.Loc.2>:

}
    1296:	00 00       	nop
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <GIE_Disable>:

void GIE_Disable(void)
{
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62

000012a6 <.Loc.4>:
 CLR_BIT(GIE_SREG,I_bit);
    12a6:	8f e5       	ldi	r24, 0x5F	; 95
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 81       	ld	r18, Z
    12ae:	8f e5       	ldi	r24, 0x5F	; 95
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	2f 77       	andi	r18, 0x7F	; 127
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18

000012b8 <.Loc.5>:

}
    12b8:	00 00       	nop
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <EXTINT_voidInit>:



#ifdef EXT_Init_NORMAL
void EXTINT_voidInit(u8 copy_u8ExtNum,u8 copy_u8ControlSens)
{
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <L0^A>

000012c6 <L0^A>:
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	6a 83       	std	Y+2, r22	; 0x02

000012ce <.Loc.1>:

	switch(copy_u8ExtNum)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <L0^A+0x2>

000012da <L0^A>:
    12da:	89 c0       	rjmp	.+274    	; 0x13ee <.L2>
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	0c f0       	brlt	.+2      	; 0x12e4 <L0^A+0x2>

000012e2 <L0^A>:
    12e2:	b2 c0       	rjmp	.+356    	; 0x1448 <.L12>
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	29 f0       	breq	.+10     	; 0x12f2 <.L4>
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <.Loc.2>

000012ee <L0^A>:
    12ee:	40 c0       	rjmp	.+128    	; 0x1370 <.L5>

000012f0 <.Loc.2>:
		SET_BIT(GICR_REG,GICR_INT2);

		break ;

	}
}
    12f0:	ab c0       	rjmp	.+342    	; 0x1448 <.L12>

000012f2 <.L4>:
		DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	62 e0       	ldi	r22, 0x02	; 2
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

000012fc <.Loc.4>:
		DIO_voidSetPinValue(PORTD_ID,PIN2,PIN_HIGH);
    12fc:	41 e0       	ldi	r20, 0x01	; 1
    12fe:	62 e0       	ldi	r22, 0x02	; 2
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00001306 <.Loc.5>:
		if(copy_u8ControlSens==FALLING_EDGE)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	81 15       	cp	r24, r1
    130a:	99 f4       	brne	.+38     	; 0x1332 <.L6>

0000130c <.Loc.6>:
			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    130c:	85 e5       	ldi	r24, 0x55	; 85
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	fc 01       	movw	r30, r24
    1312:	20 81       	ld	r18, Z
    1314:	85 e5       	ldi	r24, 0x55	; 85
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	2e 7f       	andi	r18, 0xFE	; 254
    131a:	fc 01       	movw	r30, r24
    131c:	20 83       	st	Z, r18

0000131e <.Loc.7>:
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    131e:	85 e5       	ldi	r24, 0x55	; 85
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	20 81       	ld	r18, Z
    1326:	85 e5       	ldi	r24, 0x55	; 85
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	22 60       	ori	r18, 0x02	; 2
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
    1330:	15 c0       	rjmp	.+42     	; 0x135c <.L7>

00001332 <.L6>:
		else if(copy_u8ControlSens==RISING_EDGE)
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 f4       	brne	.+36     	; 0x135c <.L7>

00001338 <.Loc.9>:
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1338:	85 e5       	ldi	r24, 0x55	; 85
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	fc 01       	movw	r30, r24
    133e:	20 81       	ld	r18, Z
    1340:	85 e5       	ldi	r24, 0x55	; 85
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	21 60       	ori	r18, 0x01	; 1
    1346:	fc 01       	movw	r30, r24
    1348:	20 83       	st	Z, r18

0000134a <.Loc.10>:
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    134a:	85 e5       	ldi	r24, 0x55	; 85
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	fc 01       	movw	r30, r24
    1350:	20 81       	ld	r18, Z
    1352:	85 e5       	ldi	r24, 0x55	; 85
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	22 60       	ori	r18, 0x02	; 2
    1358:	fc 01       	movw	r30, r24
    135a:	20 83       	st	Z, r18

0000135c <.L7>:
		SET_BIT(GICR_REG,GICR_INT0);
    135c:	8b e5       	ldi	r24, 0x5B	; 91
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	fc 01       	movw	r30, r24
    1362:	20 81       	ld	r18, Z
    1364:	8b e5       	ldi	r24, 0x5B	; 91
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	20 64       	ori	r18, 0x40	; 64
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18

0000136e <.Loc.12>:
		break ;
    136e:	6c c0       	rjmp	.+216    	; 0x1448 <.L12>

00001370 <.L5>:
		DIO_voidSetPinDirection(PORTD_ID,PIN3,PIN_INPUT);
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	63 e0       	ldi	r22, 0x03	; 3
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

0000137a <.Loc.14>:
		DIO_voidSetPinValue(PORTD_ID,PIN3,PIN_HIGH);
    137a:	41 e0       	ldi	r20, 0x01	; 1
    137c:	63 e0       	ldi	r22, 0x03	; 3
    137e:	83 e0       	ldi	r24, 0x03	; 3
    1380:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00001384 <.Loc.15>:
		if(copy_u8ControlSens==FALLING_EDGE)
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	81 15       	cp	r24, r1
    1388:	99 f4       	brne	.+38     	; 0x13b0 <.L8>

0000138a <.Loc.16>:
			CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    138a:	85 e5       	ldi	r24, 0x55	; 85
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fc 01       	movw	r30, r24
    1390:	20 81       	ld	r18, Z
    1392:	85 e5       	ldi	r24, 0x55	; 85
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	2b 7f       	andi	r18, 0xFB	; 251
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18

0000139c <.Loc.17>:
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    139c:	85 e5       	ldi	r24, 0x55	; 85
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	fc 01       	movw	r30, r24
    13a2:	20 81       	ld	r18, Z
    13a4:	85 e5       	ldi	r24, 0x55	; 85
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	28 60       	ori	r18, 0x08	; 8
    13aa:	fc 01       	movw	r30, r24
    13ac:	20 83       	st	Z, r18
    13ae:	15 c0       	rjmp	.+42     	; 0x13da <.L9>

000013b0 <.L8>:
		else if(copy_u8ControlSens==RISING_EDGE)
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 f4       	brne	.+36     	; 0x13da <.L9>

000013b6 <.Loc.19>:
			SET_BIT(MCUCR_REG,MCUCR_ISC10);
    13b6:	85 e5       	ldi	r24, 0x55	; 85
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 81       	ld	r18, Z
    13be:	85 e5       	ldi	r24, 0x55	; 85
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	24 60       	ori	r18, 0x04	; 4
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18

000013c8 <.Loc.20>:
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    13c8:	85 e5       	ldi	r24, 0x55	; 85
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 81       	ld	r18, Z
    13d0:	85 e5       	ldi	r24, 0x55	; 85
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	28 60       	ori	r18, 0x08	; 8
    13d6:	fc 01       	movw	r30, r24
    13d8:	20 83       	st	Z, r18

000013da <.L9>:
		SET_BIT(GICR_REG,GICR_INT1);
    13da:	8b e5       	ldi	r24, 0x5B	; 91
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	fc 01       	movw	r30, r24
    13e0:	20 81       	ld	r18, Z
    13e2:	8b e5       	ldi	r24, 0x5B	; 91
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	20 68       	ori	r18, 0x80	; 128
    13e8:	fc 01       	movw	r30, r24
    13ea:	20 83       	st	Z, r18

000013ec <.Loc.22>:
		break ;
    13ec:	2d c0       	rjmp	.+90     	; 0x1448 <.L12>

000013ee <.L2>:
		DIO_voidSetPinDirection(PORTB_ID,PIN2,PIN_INPUT);
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	62 e0       	ldi	r22, 0x02	; 2
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <DIO_voidSetPinDirection>

000013f8 <.Loc.24>:
		DIO_voidSetPinValue(PORTB_ID,PIN2,PIN_HIGH);
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	62 e0       	ldi	r22, 0x02	; 2
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_voidSetPinValue>

00001402 <.Loc.25>:
		if(copy_u8ControlSens==FALLING_EDGE)
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	81 15       	cp	r24, r1
    1406:	51 f4       	brne	.+20     	; 0x141c <.L10>

00001408 <.Loc.26>:
			CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1408:	84 e5       	ldi	r24, 0x54	; 84
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	fc 01       	movw	r30, r24
    140e:	20 81       	ld	r18, Z
    1410:	84 e5       	ldi	r24, 0x54	; 84
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	2f 7b       	andi	r18, 0xBF	; 191
    1416:	fc 01       	movw	r30, r24
    1418:	20 83       	st	Z, r18
    141a:	0c c0       	rjmp	.+24     	; 0x1434 <.L11>

0000141c <.L10>:
		else if(copy_u8ControlSens==RISING_EDGE)
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	49 f4       	brne	.+18     	; 0x1434 <.L11>

00001422 <.Loc.28>:
			SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1422:	84 e5       	ldi	r24, 0x54	; 84
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	fc 01       	movw	r30, r24
    1428:	20 81       	ld	r18, Z
    142a:	84 e5       	ldi	r24, 0x54	; 84
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	20 64       	ori	r18, 0x40	; 64
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18

00001434 <.L11>:
		SET_BIT(GICR_REG,GICR_INT2);
    1434:	8b e5       	ldi	r24, 0x5B	; 91
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	fc 01       	movw	r30, r24
    143a:	20 81       	ld	r18, Z
    143c:	8b e5       	ldi	r24, 0x5B	; 91
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	20 62       	ori	r18, 0x20	; 32
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18

00001446 <.Loc.30>:
	...

00001448 <.L12>:
}
    1448:	00 00       	nop
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <EXTINT_voidSetCallBack>:




void EXTINT_voidSetCallBack (  void (*ptr_ext)(void) ,u8 copy_u8ExtNum )
{
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	00 d0       	rcall	.+0      	; 0x145a <L0^A>

0000145a <L0^A>:
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	6b 83       	std	Y+3, r22	; 0x03

00001466 <.Loc.33>:

	if(ptr_ext!=NULL)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	29 f1       	breq	.+74     	; 0x14b8 <.L14>

0000146e <.Loc.34>:
	{
		switch(copy_u8ExtNum)
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	82 30       	cpi	r24, 0x02	; 2
    1476:	91 05       	cpc	r25, r1
    1478:	b9 f0       	breq	.+46     	; 0x14a8 <.L15>
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	91 05       	cpc	r25, r1
    147e:	dc f4       	brge	.+54     	; 0x14b6 <.L20>
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	21 f0       	breq	.+8      	; 0x148c <.L17>
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	41 f0       	breq	.+16     	; 0x149a <.L18>

0000148a <.Loc.35>:
			ptr_ArrCallBack[ 1 ]= ptr_ext;
			break;
		case EXT2_ID:
			ptr_ArrCallBack[ 2 ]= ptr_ext;
			break;
		default: break;
    148a:	15 c0       	rjmp	.+42     	; 0x14b6 <.L20>

0000148c <.L17>:
			ptr_ArrCallBack[ 0 ]= ptr_ext;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <ptr_ArrCallBack+0x1>
    1494:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <ptr_ArrCallBack>

00001498 <.Loc.37>:
			break;
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <.L14>

0000149a <.L18>:
			ptr_ArrCallBack[ 1 ]= ptr_ext;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <ptr_ArrCallBack+0x3>
    14a2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <ptr_ArrCallBack+0x2>

000014a6 <.Loc.39>:
			break;
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <.L14>

000014a8 <.L15>:
			ptr_ArrCallBack[ 2 ]= ptr_ext;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <ptr_ArrCallBack+0x5>
    14b0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <ptr_ArrCallBack+0x4>

000014b4 <.Loc.41>:
			break;
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <.L14>

000014b6 <.L20>:
	...

000014b8 <.L14>:
		}



	}
}
    14b8:	00 00       	nop
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <__vector_1>:



void __vector_1 () __attribute__ ((signal));
void __vector_1 ()
{
    14c6:	1f 92       	push	r1
    14c8:	0f 92       	push	r0
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	0f 92       	push	r0
    14ce:	11 24       	eor	r1, r1
    14d0:	2f 93       	push	r18
    14d2:	3f 93       	push	r19
    14d4:	4f 93       	push	r20
    14d6:	5f 93       	push	r21
    14d8:	6f 93       	push	r22
    14da:	7f 93       	push	r23
    14dc:	8f 93       	push	r24
    14de:	9f 93       	push	r25
    14e0:	af 93       	push	r26
    14e2:	bf 93       	push	r27
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62

000014f0 <.Loc.45>:

	if(ptr_ArrCallBack[0] !=NULL)
    14f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ptr_ArrCallBack>
    14f4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <ptr_ArrCallBack+0x1>

000014f8 <.Loc.46>:
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	31 f0       	breq	.+12     	; 0x1508 <.L23>

000014fc <.Loc.47>:
	{
		ptr_ArrCallBack[0]();
    14fc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ptr_ArrCallBack>
    1500:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <ptr_ArrCallBack+0x1>

00001504 <.Loc.48>:
    1504:	fc 01       	movw	r30, r24
    1506:	09 95       	icall

00001508 <.L23>:
	}



}
    1508:	00 00       	nop
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	ff 91       	pop	r31
    1510:	ef 91       	pop	r30
    1512:	bf 91       	pop	r27
    1514:	af 91       	pop	r26
    1516:	9f 91       	pop	r25
    1518:	8f 91       	pop	r24
    151a:	7f 91       	pop	r23
    151c:	6f 91       	pop	r22
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_2>:

void __vector_2 () __attribute__ ((signal));
void __vector_2 ()
{
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	2f 93       	push	r18
    153c:	3f 93       	push	r19
    153e:	4f 93       	push	r20
    1540:	5f 93       	push	r21
    1542:	6f 93       	push	r22
    1544:	7f 93       	push	r23
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	ef 93       	push	r30
    1550:	ff 93       	push	r31
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62

0000155a <.Loc.51>:
	if(ptr_ArrCallBack[1] !=NULL)
    155a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <ptr_ArrCallBack+0x2>
    155e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <ptr_ArrCallBack+0x3>

00001562 <.Loc.52>:
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	31 f0       	breq	.+12     	; 0x1572 <.L26>

00001566 <.Loc.53>:
		{
		ptr_ArrCallBack[1]();
    1566:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <ptr_ArrCallBack+0x2>
    156a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <ptr_ArrCallBack+0x3>

0000156e <.Loc.54>:
    156e:	fc 01       	movw	r30, r24
    1570:	09 95       	icall

00001572 <.L26>:
		}


}
    1572:	00 00       	nop
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <__vector_3>:

void __vector_3 () __attribute__ ((signal));
void __vector_3 ()
{
    159a:	1f 92       	push	r1
    159c:	0f 92       	push	r0
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62

000015c4 <.Loc.57>:
	if(ptr_ArrCallBack[2] !=NULL)
    15c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <ptr_ArrCallBack+0x4>
    15c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <ptr_ArrCallBack+0x5>

000015cc <.Loc.58>:
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	31 f0       	breq	.+12     	; 0x15dc <.L29>

000015d0 <.Loc.59>:
		{
		ptr_ArrCallBack[2]();
    15d0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <ptr_ArrCallBack+0x4>
    15d4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <ptr_ArrCallBack+0x5>

000015d8 <.Loc.60>:
    15d8:	fc 01       	movw	r30, r24
    15da:	09 95       	icall

000015dc <.L29>:
		}


}
    15dc:	00 00       	nop
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	ff 91       	pop	r31
    15e4:	ef 91       	pop	r30
    15e6:	bf 91       	pop	r27
    15e8:	af 91       	pop	r26
    15ea:	9f 91       	pop	r25
    15ec:	8f 91       	pop	r24
    15ee:	7f 91       	pop	r23
    15f0:	6f 91       	pop	r22
    15f2:	5f 91       	pop	r21
    15f4:	4f 91       	pop	r20
    15f6:	3f 91       	pop	r19
    15f8:	2f 91       	pop	r18
    15fa:	0f 90       	pop	r0
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	0f 90       	pop	r0
    1600:	1f 90       	pop	r1
    1602:	18 95       	reti

00001604 <DIO_voidSetPortDirection>:
#include"DIO_Private.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	00 d0       	rcall	.+0      	; 0x160a <L0^A>

0000160a <L0^A>:
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	6a 83       	std	Y+2, r22	; 0x02

00001612 <.Loc.1>:
	switch(Copy_u8portID)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	83 30       	cpi	r24, 0x03	; 3
    161a:	91 05       	cpc	r25, r1
    161c:	09 f1       	breq	.+66     	; 0x1660 <.L2>
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	91 05       	cpc	r25, r1
    1622:	24 f5       	brge	.+72     	; 0x166c <.L3>
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	91 05       	cpc	r25, r1
    1628:	a9 f0       	breq	.+42     	; 0x1654 <.L4>
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	f4 f4       	brge	.+60     	; 0x166c <.L3>
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	21 f0       	breq	.+8      	; 0x163c <.L5>
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	39 f0       	breq	.+14     	; 0x1648 <.L6>

0000163a <.Loc.2>:
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;

	}
}
    163a:	18 c0       	rjmp	.+48     	; 0x166c <.L3>

0000163c <.L5>:
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
    163c:	8a e3       	ldi	r24, 0x3A	; 58
    163e:	90 e0       	ldi	r25, 0x00	; 0

00001640 <.Loc.4>:
    1640:	2a 81       	ldd	r18, Y+2	; 0x02
    1642:	fc 01       	movw	r30, r24
    1644:	20 83       	st	Z, r18

00001646 <.Loc.5>:
    1646:	12 c0       	rjmp	.+36     	; 0x166c <.L3>

00001648 <.L6>:
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
    1648:	87 e3       	ldi	r24, 0x37	; 55
    164a:	90 e0       	ldi	r25, 0x00	; 0

0000164c <.Loc.7>:
    164c:	2a 81       	ldd	r18, Y+2	; 0x02
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18

00001652 <.Loc.8>:
    1652:	0c c0       	rjmp	.+24     	; 0x166c <.L3>

00001654 <.L4>:
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
    1654:	84 e3       	ldi	r24, 0x34	; 52
    1656:	90 e0       	ldi	r25, 0x00	; 0

00001658 <.Loc.10>:
    1658:	2a 81       	ldd	r18, Y+2	; 0x02
    165a:	fc 01       	movw	r30, r24
    165c:	20 83       	st	Z, r18

0000165e <.Loc.11>:
    165e:	06 c0       	rjmp	.+12     	; 0x166c <.L3>

00001660 <.L2>:
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
    1660:	81 e3       	ldi	r24, 0x31	; 49
    1662:	90 e0       	ldi	r25, 0x00	; 0

00001664 <.Loc.13>:
    1664:	2a 81       	ldd	r18, Y+2	; 0x02
    1666:	fc 01       	movw	r30, r24
    1668:	20 83       	st	Z, r18

0000166a <.Loc.14>:
	...

0000166c <.L3>:
}
    166c:	00 00       	nop
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	00 d0       	rcall	.+0      	; 0x167e <L0^A>

0000167e <L0^A>:
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6a 83       	std	Y+2, r22	; 0x02

00001686 <.Loc.17>:

	switch(Copy_u8PortID)
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	09 f1       	breq	.+66     	; 0x16d4 <.L9>
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	91 05       	cpc	r25, r1
    1696:	24 f5       	brge	.+72     	; 0x16e0 <.L10>
    1698:	82 30       	cpi	r24, 0x02	; 2
    169a:	91 05       	cpc	r25, r1
    169c:	a9 f0       	breq	.+42     	; 0x16c8 <.L11>
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	f4 f4       	brge	.+60     	; 0x16e0 <.L10>
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	21 f0       	breq	.+8      	; 0x16b0 <.L12>
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	91 05       	cpc	r25, r1
    16ac:	39 f0       	breq	.+14     	; 0x16bc <.L13>

000016ae <.Loc.18>:
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;

	}
}
    16ae:	18 c0       	rjmp	.+48     	; 0x16e0 <.L10>

000016b0 <.L12>:
	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
    16b0:	8b e3       	ldi	r24, 0x3B	; 59
    16b2:	90 e0       	ldi	r25, 0x00	; 0

000016b4 <.Loc.20>:
    16b4:	2a 81       	ldd	r18, Y+2	; 0x02
    16b6:	fc 01       	movw	r30, r24
    16b8:	20 83       	st	Z, r18

000016ba <.Loc.21>:
    16ba:	12 c0       	rjmp	.+36     	; 0x16e0 <.L10>

000016bc <.L13>:
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
    16bc:	88 e3       	ldi	r24, 0x38	; 56
    16be:	90 e0       	ldi	r25, 0x00	; 0

000016c0 <.Loc.23>:
    16c0:	2a 81       	ldd	r18, Y+2	; 0x02
    16c2:	fc 01       	movw	r30, r24
    16c4:	20 83       	st	Z, r18

000016c6 <.Loc.24>:
    16c6:	0c c0       	rjmp	.+24     	; 0x16e0 <.L10>

000016c8 <.L11>:
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
    16c8:	85 e3       	ldi	r24, 0x35	; 53
    16ca:	90 e0       	ldi	r25, 0x00	; 0

000016cc <.Loc.26>:
    16cc:	2a 81       	ldd	r18, Y+2	; 0x02
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18

000016d2 <.Loc.27>:
    16d2:	06 c0       	rjmp	.+12     	; 0x16e0 <.L10>

000016d4 <.L9>:
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
    16d4:	82 e3       	ldi	r24, 0x32	; 50
    16d6:	90 e0       	ldi	r25, 0x00	; 0

000016d8 <.Loc.29>:
    16d8:	2a 81       	ldd	r18, Y+2	; 0x02
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18

000016de <.Loc.30>:
	...

000016e0 <.L10>:
}
    16e0:	00 00       	nop
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <L0^A>

000016f2 <L0^A>:
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	6a 83       	std	Y+2, r22	; 0x02
    16fc:	4b 83       	std	Y+3, r20	; 0x03

000016fe <.Loc.33>:
	if(Copy_u8PinID>=PIN0 &&Copy_u8PinID<=PIN7)
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	88 30       	cpi	r24, 0x08	; 8
    1702:	08 f0       	brcs	.+2      	; 0x1706 <.Loc.34>

00001704 <L0^A>:
    1704:	ef c0       	rjmp	.+478    	; 0x18e4 <.L16>

00001706 <.Loc.34>:
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	09 f0       	breq	.+2      	; 0x170e <.Loc.35>

0000170c <L0^A>:
    170c:	70 c0       	rjmp	.+224    	; 0x17ee <.L17>

0000170e <.Loc.35>:
		{
			switch(Copy_u8PortID)
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	91 05       	cpc	r25, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <L0^A+0x2>

0000171a <L0^A>:
    171a:	53 c0       	rjmp	.+166    	; 0x17c2 <.L18>
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	91 05       	cpc	r25, r1
    1720:	0c f0       	brlt	.+2      	; 0x1724 <L0^A+0x2>

00001722 <L0^A>:
    1722:	dd c0       	rjmp	.+442    	; 0x18de <.L30>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	91 05       	cpc	r25, r1
    1728:	b1 f1       	breq	.+108    	; 0x1796 <.L20>
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	0c f0       	brlt	.+2      	; 0x1732 <L0^A+0x2>

00001730 <L0^A>:
    1730:	d6 c0       	rjmp	.+428    	; 0x18de <.L30>
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	21 f0       	breq	.+8      	; 0x173e <.L21>
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	b9 f0       	breq	.+46     	; 0x176a <.L22>

0000173c <.Loc.36>:
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;

			default:   break;
    173c:	d0 c0       	rjmp	.+416    	; 0x18de <.L30>

0000173e <.L21>:
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
    173e:	8a e3       	ldi	r24, 0x3A	; 58
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	fc 01       	movw	r30, r24
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <.L2^B1>

00001754 <.L1^B1>:
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25

00001758 <.L2^B1>:
    1758:	2a 95       	dec	r18
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <.L1^B1>
    175c:	24 2f       	mov	r18, r20
    175e:	28 2b       	or	r18, r24
    1760:	8a e3       	ldi	r24, 0x3A	; 58
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18

00001768 <.Loc.38>:
    1768:	bd c0       	rjmp	.+378    	; 0x18e4 <.L16>

0000176a <.L22>:
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
    176a:	87 e3       	ldi	r24, 0x37	; 55
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	fc 01       	movw	r30, r24
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <.L2^B2>

00001780 <.L1^B2>:
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25

00001784 <.L2^B2>:
    1784:	2a 95       	dec	r18
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <.L1^B2>
    1788:	24 2f       	mov	r18, r20
    178a:	28 2b       	or	r18, r24
    178c:	87 e3       	ldi	r24, 0x37	; 55
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18

00001794 <.Loc.40>:
    1794:	a7 c0       	rjmp	.+334    	; 0x18e4 <.L16>

00001796 <.L20>:
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
    1796:	84 e3       	ldi	r24, 0x34	; 52
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <.L2^B3>

000017ac <.L1^B3>:
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25

000017b0 <.L2^B3>:
    17b0:	2a 95       	dec	r18
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <.L1^B3>
    17b4:	24 2f       	mov	r18, r20
    17b6:	28 2b       	or	r18, r24
    17b8:	84 e3       	ldi	r24, 0x34	; 52
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	fc 01       	movw	r30, r24
    17be:	20 83       	st	Z, r18

000017c0 <.Loc.42>:
    17c0:	91 c0       	rjmp	.+290    	; 0x18e4 <.L16>

000017c2 <.L18>:
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
    17c2:	81 e3       	ldi	r24, 0x31	; 49
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	fc 01       	movw	r30, r24
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <.L2^B4>

000017d8 <.L1^B4>:
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25

000017dc <.L2^B4>:
    17dc:	2a 95       	dec	r18
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <.L1^B4>
    17e0:	24 2f       	mov	r18, r20
    17e2:	28 2b       	or	r18, r24
    17e4:	81 e3       	ldi	r24, 0x31	; 49
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	fc 01       	movw	r30, r24
    17ea:	20 83       	st	Z, r18

000017ec <.Loc.44>:
    17ec:	7b c0       	rjmp	.+246    	; 0x18e4 <.L16>

000017ee <.L17>:

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 15       	cp	r24, r1
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <.Loc.46>

000017f4 <L0^A>:
    17f4:	77 c0       	rjmp	.+238    	; 0x18e4 <.L16>

000017f6 <.Loc.46>:
		{
			switch(Copy_u8PortID)
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	83 30       	cpi	r24, 0x03	; 3
    17fe:	91 05       	cpc	r25, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <L0^A+0x2>

00001802 <L0^A>:
    1802:	56 c0       	rjmp	.+172    	; 0x18b0 <.L24>
    1804:	84 30       	cpi	r24, 0x04	; 4
    1806:	91 05       	cpc	r25, r1
    1808:	0c f0       	brlt	.+2      	; 0x180c <L0^A+0x2>

0000180a <L0^A>:
    180a:	6b c0       	rjmp	.+214    	; 0x18e2 <.L31>
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	91 05       	cpc	r25, r1
    1810:	c1 f1       	breq	.+112    	; 0x1882 <.L26>
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	91 05       	cpc	r25, r1
    1816:	0c f0       	brlt	.+2      	; 0x181a <L0^A+0x2>

00001818 <L0^A>:
    1818:	64 c0       	rjmp	.+200    	; 0x18e2 <.L31>
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	21 f0       	breq	.+8      	; 0x1826 <.L27>
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	91 05       	cpc	r25, r1
    1822:	c1 f0       	breq	.+48     	; 0x1854 <.L28>

00001824 <.Loc.47>:
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
			default:   break;
    1824:	5e c0       	rjmp	.+188    	; 0x18e2 <.L31>

00001826 <.L27>:
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    1826:	8a e3       	ldi	r24, 0x3A	; 58
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	fc 01       	movw	r30, r24
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <.L2^B5>

0000183c <.L1^B5>:
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25

00001840 <.L2^B5>:
    1840:	2a 95       	dec	r18
    1842:	e2 f7       	brpl	.-8      	; 0x183c <.L1^B5>
    1844:	80 95       	com	r24
    1846:	24 2f       	mov	r18, r20
    1848:	28 23       	and	r18, r24
    184a:	8a e3       	ldi	r24, 0x3A	; 58
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18

00001852 <.Loc.49>:
    1852:	48 c0       	rjmp	.+144    	; 0x18e4 <.L16>

00001854 <.L28>:
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    1854:	87 e3       	ldi	r24, 0x37	; 55
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	fc 01       	movw	r30, r24
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <.L2^B6>

0000186a <.L1^B6>:
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25

0000186e <.L2^B6>:
    186e:	2a 95       	dec	r18
    1870:	e2 f7       	brpl	.-8      	; 0x186a <.L1^B6>
    1872:	80 95       	com	r24
    1874:	24 2f       	mov	r18, r20
    1876:	28 23       	and	r18, r24
    1878:	87 e3       	ldi	r24, 0x37	; 55
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	fc 01       	movw	r30, r24
    187e:	20 83       	st	Z, r18

00001880 <.Loc.51>:
    1880:	31 c0       	rjmp	.+98     	; 0x18e4 <.L16>

00001882 <.L26>:
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    1882:	84 e3       	ldi	r24, 0x34	; 52
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	fc 01       	movw	r30, r24
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 c0       	rjmp	.+4      	; 0x189c <.L2^B7>

00001898 <.L1^B7>:
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25

0000189c <.L2^B7>:
    189c:	2a 95       	dec	r18
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <.L1^B7>
    18a0:	80 95       	com	r24
    18a2:	24 2f       	mov	r18, r20
    18a4:	28 23       	and	r18, r24
    18a6:	84 e3       	ldi	r24, 0x34	; 52
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 83       	st	Z, r18

000018ae <.Loc.53>:
    18ae:	1a c0       	rjmp	.+52     	; 0x18e4 <.L16>

000018b0 <.L24>:
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    18b0:	81 e3       	ldi	r24, 0x31	; 49
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <.L2^B8>

000018c6 <.L1^B8>:
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25

000018ca <.L2^B8>:
    18ca:	2a 95       	dec	r18
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <.L1^B8>
    18ce:	80 95       	com	r24
    18d0:	24 2f       	mov	r18, r20
    18d2:	28 23       	and	r18, r24
    18d4:	81 e3       	ldi	r24, 0x31	; 49
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	fc 01       	movw	r30, r24
    18da:	20 83       	st	Z, r18

000018dc <.Loc.55>:
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <.L16>

000018de <.L30>:
			default:   break;
    18de:	00 00       	nop
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <.L16>

000018e2 <.L31>:
	...

000018e4 <.L16>:
			}
		}
	}

}
    18e4:	00 00       	nop
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <L0^A>

000018f8 <L0^A>:
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	6a 83       	std	Y+2, r22	; 0x02
    1902:	4b 83       	std	Y+3, r20	; 0x03

00001904 <.Loc.60>:
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	88 30       	cpi	r24, 0x08	; 8
    1908:	08 f0       	brcs	.+2      	; 0x190c <.Loc.61>

0000190a <L0^A>:
    190a:	ec c0       	rjmp	.+472    	; 0x1ae4 <.L33>

0000190c <.Loc.61>:
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	09 f0       	breq	.+2      	; 0x1914 <.Loc.62>

00001912 <L0^A>:
    1912:	70 c0       	rjmp	.+224    	; 0x19f4 <.L34>

00001914 <.Loc.62>:
		{

			switch(Copy_u8PortID)
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	83 30       	cpi	r24, 0x03	; 3
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <L0^A+0x2>

00001920 <L0^A>:
    1920:	53 c0       	rjmp	.+166    	; 0x19c8 <.L35>
    1922:	84 30       	cpi	r24, 0x04	; 4
    1924:	91 05       	cpc	r25, r1
    1926:	0c f0       	brlt	.+2      	; 0x192a <L0^A+0x2>

00001928 <L0^A>:
    1928:	dd c0       	rjmp	.+442    	; 0x1ae4 <.L33>
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	91 05       	cpc	r25, r1
    192e:	b1 f1       	breq	.+108    	; 0x199c <.L37>
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	91 05       	cpc	r25, r1
    1934:	0c f0       	brlt	.+2      	; 0x1938 <L0^A+0x2>

00001936 <L0^A>:
    1936:	d6 c0       	rjmp	.+428    	; 0x1ae4 <.L33>
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	21 f0       	breq	.+8      	; 0x1944 <.L38>
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	91 05       	cpc	r25, r1
    1940:	b9 f0       	breq	.+46     	; 0x1970 <.L39>

00001942 <.Loc.63>:
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;

			}
		}
	}
}
    1942:	d0 c0       	rjmp	.+416    	; 0x1ae4 <.L33>

00001944 <.L38>:
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    1944:	8b e3       	ldi	r24, 0x3B	; 59
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 c0       	rjmp	.+4      	; 0x195e <.L2^B9>

0000195a <.L1^B9>:
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25

0000195e <.L2^B9>:
    195e:	2a 95       	dec	r18
    1960:	e2 f7       	brpl	.-8      	; 0x195a <.L1^B9>
    1962:	24 2f       	mov	r18, r20
    1964:	28 2b       	or	r18, r24
    1966:	8b e3       	ldi	r24, 0x3B	; 59
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	fc 01       	movw	r30, r24
    196c:	20 83       	st	Z, r18

0000196e <.Loc.65>:
    196e:	ba c0       	rjmp	.+372    	; 0x1ae4 <.L33>

00001970 <.L39>:
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    1970:	88 e3       	ldi	r24, 0x38	; 56
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	fc 01       	movw	r30, r24
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 c0       	rjmp	.+4      	; 0x198a <.L2^B10>

00001986 <.L1^B10>:
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25

0000198a <.L2^B10>:
    198a:	2a 95       	dec	r18
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <.L1^B10>
    198e:	24 2f       	mov	r18, r20
    1990:	28 2b       	or	r18, r24
    1992:	88 e3       	ldi	r24, 0x38	; 56
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	fc 01       	movw	r30, r24
    1998:	20 83       	st	Z, r18

0000199a <.Loc.67>:
    199a:	a4 c0       	rjmp	.+328    	; 0x1ae4 <.L33>

0000199c <.L37>:
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    199c:	85 e3       	ldi	r24, 0x35	; 53
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	fc 01       	movw	r30, r24
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <.L2^B11>

000019b2 <.L1^B11>:
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25

000019b6 <.L2^B11>:
    19b6:	2a 95       	dec	r18
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <.L1^B11>
    19ba:	24 2f       	mov	r18, r20
    19bc:	28 2b       	or	r18, r24
    19be:	85 e3       	ldi	r24, 0x35	; 53
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 83       	st	Z, r18

000019c6 <.Loc.69>:
    19c6:	8e c0       	rjmp	.+284    	; 0x1ae4 <.L33>

000019c8 <.L35>:
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    19c8:	82 e3       	ldi	r24, 0x32	; 50
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <.L2^B12>

000019de <.L1^B12>:
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25

000019e2 <.L2^B12>:
    19e2:	2a 95       	dec	r18
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <.L1^B12>
    19e6:	24 2f       	mov	r18, r20
    19e8:	28 2b       	or	r18, r24
    19ea:	82 e3       	ldi	r24, 0x32	; 50
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	fc 01       	movw	r30, r24
    19f0:	20 83       	st	Z, r18

000019f2 <.Loc.71>:
    19f2:	78 c0       	rjmp	.+240    	; 0x1ae4 <.L33>

000019f4 <.L34>:
		else if(Copy_u8PinValue==PIN_LOW)//Low
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	81 15       	cp	r24, r1
    19f8:	09 f0       	breq	.+2      	; 0x19fc <.Loc.73>

000019fa <L0^A>:
    19fa:	74 c0       	rjmp	.+232    	; 0x1ae4 <.L33>

000019fc <.Loc.73>:
			switch(Copy_u8PortID)
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	83 30       	cpi	r24, 0x03	; 3
    1a04:	91 05       	cpc	r25, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <L0^A+0x2>

00001a08 <L0^A>:
    1a08:	56 c0       	rjmp	.+172    	; 0x1ab6 <.L40>
    1a0a:	84 30       	cpi	r24, 0x04	; 4
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	0c f0       	brlt	.+2      	; 0x1a12 <L0^A+0x2>

00001a10 <L0^A>:
    1a10:	69 c0       	rjmp	.+210    	; 0x1ae4 <.L33>
    1a12:	82 30       	cpi	r24, 0x02	; 2
    1a14:	91 05       	cpc	r25, r1
    1a16:	c1 f1       	breq	.+112    	; 0x1a88 <.L41>
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	0c f0       	brlt	.+2      	; 0x1a20 <L0^A+0x2>

00001a1e <L0^A>:
    1a1e:	62 c0       	rjmp	.+196    	; 0x1ae4 <.L33>
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <.L42>
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	91 05       	cpc	r25, r1
    1a28:	c1 f0       	breq	.+48     	; 0x1a5a <.L43>

00001a2a <.Loc.74>:
}
    1a2a:	5c c0       	rjmp	.+184    	; 0x1ae4 <.L33>

00001a2c <.L42>:
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    1a2c:	8b e3       	ldi	r24, 0x3B	; 59
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	fc 01       	movw	r30, r24
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <.L2^B13>

00001a42 <.L1^B13>:
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25

00001a46 <.L2^B13>:
    1a46:	2a 95       	dec	r18
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <.L1^B13>
    1a4a:	80 95       	com	r24
    1a4c:	24 2f       	mov	r18, r20
    1a4e:	28 23       	and	r18, r24
    1a50:	8b e3       	ldi	r24, 0x3B	; 59
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	fc 01       	movw	r30, r24
    1a56:	20 83       	st	Z, r18

00001a58 <.Loc.76>:
    1a58:	45 c0       	rjmp	.+138    	; 0x1ae4 <.L33>

00001a5a <.L43>:
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    1a5a:	88 e3       	ldi	r24, 0x38	; 56
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	fc 01       	movw	r30, r24
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <.L2^B14>

00001a70 <.L1^B14>:
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25

00001a74 <.L2^B14>:
    1a74:	2a 95       	dec	r18
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <.L1^B14>
    1a78:	80 95       	com	r24
    1a7a:	24 2f       	mov	r18, r20
    1a7c:	28 23       	and	r18, r24
    1a7e:	88 e3       	ldi	r24, 0x38	; 56
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	fc 01       	movw	r30, r24
    1a84:	20 83       	st	Z, r18

00001a86 <.Loc.78>:
    1a86:	2e c0       	rjmp	.+92     	; 0x1ae4 <.L33>

00001a88 <.L41>:
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    1a88:	85 e3       	ldi	r24, 0x35	; 53
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <.L2^B15>

00001a9e <.L1^B15>:
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25

00001aa2 <.L2^B15>:
    1aa2:	2a 95       	dec	r18
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <.L1^B15>
    1aa6:	80 95       	com	r24
    1aa8:	24 2f       	mov	r18, r20
    1aaa:	28 23       	and	r18, r24
    1aac:	85 e3       	ldi	r24, 0x35	; 53
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	20 83       	st	Z, r18

00001ab4 <.Loc.80>:
    1ab4:	17 c0       	rjmp	.+46     	; 0x1ae4 <.L33>

00001ab6 <.L40>:
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1ab6:	82 e3       	ldi	r24, 0x32	; 50
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	fc 01       	movw	r30, r24
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <.L2^B16>

00001acc <.L1^B16>:
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25

00001ad0 <.L2^B16>:
    1ad0:	2a 95       	dec	r18
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <.L1^B16>
    1ad4:	80 95       	com	r24
    1ad6:	24 2f       	mov	r18, r20
    1ad8:	28 23       	and	r18, r24
    1ada:	82 e3       	ldi	r24, 0x32	; 50
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	fc 01       	movw	r30, r24
    1ae0:	20 83       	st	Z, r18

00001ae2 <.Loc.82>:
	...

00001ae4 <.L33>:
}
    1ae4:	00 00       	nop
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	08 95       	ret

00001af2 <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <L0^A>

00001af8 <L0^A>:
    1af8:	0f 92       	push	r0
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	8a 83       	std	Y+2, r24	; 0x02
    1b00:	6b 83       	std	Y+3, r22	; 0x03

00001b02 <.Loc.85>:

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7 )
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	88 30       	cpi	r24, 0x08	; 8
    1b06:	08 f0       	brcs	.+2      	; 0x1b0a <.Loc.86>

00001b08 <L0^A>:
    1b08:	60 c0       	rjmp	.+192    	; 0x1bca <.L46>

00001b0a <.Loc.86>:
	{
		switch(copy_u8PortID)
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	91 05       	cpc	r25, r1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <L0^A+0x2>

00001b16 <L0^A>:
    1b16:	47 c0       	rjmp	.+142    	; 0x1ba6 <.L47>
    1b18:	84 30       	cpi	r24, 0x04	; 4
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <L0^A+0x2>

00001b1e <L0^A>:
    1b1e:	55 c0       	rjmp	.+170    	; 0x1bca <.L46>
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	91 05       	cpc	r25, r1
    1b24:	71 f1       	breq	.+92     	; 0x1b82 <.L48>
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	91 05       	cpc	r25, r1
    1b2a:	0c f0       	brlt	.+2      	; 0x1b2e <L0^A+0x2>

00001b2c <L0^A>:
    1b2c:	4e c0       	rjmp	.+156    	; 0x1bca <.L46>
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	21 f0       	breq	.+8      	; 0x1b3a <.L49>
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	91 05       	cpc	r25, r1
    1b36:	99 f0       	breq	.+38     	; 0x1b5e <.L50>
    1b38:	48 c0       	rjmp	.+144    	; 0x1bca <.L46>

00001b3a <.L49>:
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    1b3a:	89 e3       	ldi	r24, 0x39	; 57
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	80 81       	ld	r24, Z
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	22 2f       	mov	r18, r18
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <.L2^B17>

00001b50 <.L1^B17>:
    1b50:	95 95       	asr	r25
    1b52:	87 95       	ror	r24

00001b54 <.L2^B17>:
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <.L1^B17>

00001b58 <.Loc.88>:
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01

00001b5c <.Loc.89>:
    1b5c:	36 c0       	rjmp	.+108    	; 0x1bca <.L46>

00001b5e <.L50>:
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    1b5e:	86 e3       	ldi	r24, 0x36	; 54
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	fc 01       	movw	r30, r24
    1b64:	80 81       	ld	r24, Z
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6c:	22 2f       	mov	r18, r18
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	02 2e       	mov	r0, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <.L2^B18>

00001b74 <.L1^B18>:
    1b74:	95 95       	asr	r25
    1b76:	87 95       	ror	r24

00001b78 <.L2^B18>:
    1b78:	0a 94       	dec	r0
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <.L1^B18>

00001b7c <.Loc.91>:
    1b7c:	81 70       	andi	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01

00001b80 <.Loc.92>:
    1b80:	24 c0       	rjmp	.+72     	; 0x1bca <.L46>

00001b82 <.L48>:
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    1b82:	83 e3       	ldi	r24, 0x33	; 51
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	fc 01       	movw	r30, r24
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	22 2f       	mov	r18, r18
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <.L2^B19>

00001b98 <.L1^B19>:
    1b98:	95 95       	asr	r25
    1b9a:	87 95       	ror	r24

00001b9c <.L2^B19>:
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <.L1^B19>

00001ba0 <.Loc.94>:
    1ba0:	81 70       	andi	r24, 0x01	; 1
    1ba2:	89 83       	std	Y+1, r24	; 0x01

00001ba4 <.Loc.95>:
    1ba4:	12 c0       	rjmp	.+36     	; 0x1bca <.L46>

00001ba6 <.L47>:
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1ba6:	80 e3       	ldi	r24, 0x30	; 48
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	fc 01       	movw	r30, r24
    1bac:	80 81       	ld	r24, Z
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	22 2f       	mov	r18, r18
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <.L2^B20>

00001bbc <.L1^B20>:
    1bbc:	95 95       	asr	r25
    1bbe:	87 95       	ror	r24

00001bc0 <.L2^B20>:
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <.L1^B20>

00001bc4 <.Loc.97>:
    1bc4:	81 70       	andi	r24, 0x01	; 1
    1bc6:	89 83       	std	Y+1, r24	; 0x01

00001bc8 <.Loc.98>:
	...

00001bca <.L46>:

		}
	}

	return Local_PinVal ;
    1bca:	89 81       	ldd	r24, Y+1	; 0x01

00001bcc <.Loc.100>:

}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <DIO_voidToggelPin>:
}
 */

/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <L0^A>

00001bde <L0^A>:
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	6a 83       	std	Y+2, r22	; 0x02

00001be6 <.Loc.102>:

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7)
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	88 30       	cpi	r24, 0x08	; 8
    1bea:	08 f0       	brcs	.+2      	; 0x1bee <.Loc.103>

00001bec <L0^A>:
    1bec:	70 c0       	rjmp	.+224    	; 0x1cce <.L53>

00001bee <.Loc.103>:
	{

		switch (copy_u8PortID)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	88 2f       	mov	r24, r24
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <L0^A+0x2>

00001bfa <L0^A>:
    1bfa:	53 c0       	rjmp	.+166    	; 0x1ca2 <.L54>
    1bfc:	84 30       	cpi	r24, 0x04	; 4
    1bfe:	91 05       	cpc	r25, r1
    1c00:	0c f0       	brlt	.+2      	; 0x1c04 <L0^A+0x2>

00001c02 <L0^A>:
    1c02:	65 c0       	rjmp	.+202    	; 0x1cce <.L53>
    1c04:	82 30       	cpi	r24, 0x02	; 2
    1c06:	91 05       	cpc	r25, r1
    1c08:	b1 f1       	breq	.+108    	; 0x1c76 <.L55>
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	0c f0       	brlt	.+2      	; 0x1c12 <L0^A+0x2>

00001c10 <L0^A>:
    1c10:	5e c0       	rjmp	.+188    	; 0x1cce <.L53>
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	21 f0       	breq	.+8      	; 0x1c1e <.L56>
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	91 05       	cpc	r25, r1
    1c1a:	b9 f0       	breq	.+46     	; 0x1c4a <.L57>

00001c1c <.Loc.104>:
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
		}

	}
}
    1c1c:	58 c0       	rjmp	.+176    	; 0x1cce <.L53>

00001c1e <.L56>:
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    1c1e:	8b e3       	ldi	r24, 0x3B	; 59
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	fc 01       	movw	r30, r24
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <.L2^B21>

00001c34 <.L1^B21>:
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25

00001c38 <.L2^B21>:
    1c38:	2a 95       	dec	r18
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <.L1^B21>
    1c3c:	24 2f       	mov	r18, r20
    1c3e:	28 27       	eor	r18, r24
    1c40:	8b e3       	ldi	r24, 0x3B	; 59
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	fc 01       	movw	r30, r24
    1c46:	20 83       	st	Z, r18

00001c48 <.Loc.106>:
    1c48:	42 c0       	rjmp	.+132    	; 0x1cce <.L53>

00001c4a <.L57>:
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    1c4a:	88 e3       	ldi	r24, 0x38	; 56
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	fc 01       	movw	r30, r24
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <.L2^B22>

00001c60 <.L1^B22>:
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25

00001c64 <.L2^B22>:
    1c64:	2a 95       	dec	r18
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <.L1^B22>
    1c68:	24 2f       	mov	r18, r20
    1c6a:	28 27       	eor	r18, r24
    1c6c:	88 e3       	ldi	r24, 0x38	; 56
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 83       	st	Z, r18

00001c74 <.Loc.108>:
    1c74:	2c c0       	rjmp	.+88     	; 0x1cce <.L53>

00001c76 <.L55>:
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    1c76:	85 e3       	ldi	r24, 0x35	; 53
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <.L2^B23>

00001c8c <.L1^B23>:
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25

00001c90 <.L2^B23>:
    1c90:	2a 95       	dec	r18
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <.L1^B23>
    1c94:	24 2f       	mov	r18, r20
    1c96:	28 27       	eor	r18, r24
    1c98:	85 e3       	ldi	r24, 0x35	; 53
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18

00001ca0 <.Loc.110>:
    1ca0:	16 c0       	rjmp	.+44     	; 0x1cce <.L53>

00001ca2 <.L54>:
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    1ca2:	82 e3       	ldi	r24, 0x32	; 50
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	80 81       	ld	r24, Z
    1caa:	48 2f       	mov	r20, r24
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <.L2^B24>

00001cb8 <.L1^B24>:
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25

00001cbc <.L2^B24>:
    1cbc:	2a 95       	dec	r18
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <.L1^B24>
    1cc0:	24 2f       	mov	r18, r20
    1cc2:	28 27       	eor	r18, r24
    1cc4:	82 e3       	ldi	r24, 0x32	; 50
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	fc 01       	movw	r30, r24
    1cca:	20 83       	st	Z, r18

00001ccc <.Loc.112>:
	...

00001cce <.L53>:
}
    1cce:	00 00       	nop
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	08 95       	ret

00001cda <ADC_voidInit>:
}
#endif
/*****************************************************************************************/

void ADC_voidInit()
{
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62

00001ce2 <.Loc.1>:
	ADMUX_REG->ADLAR = TYPE_DATA ;
    1ce2:	87 e2       	ldi	r24, 0x27	; 39
    1ce4:	90 e0       	ldi	r25, 0x00	; 0

00001ce6 <.Loc.2>:
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	20 81       	ld	r18, Z
    1cea:	2f 7d       	andi	r18, 0xDF	; 223
    1cec:	fc 01       	movw	r30, r24
    1cee:	20 83       	st	Z, r18

00001cf0 <.Loc.3>:

	ADMUX_REG->REFS  = REF_VOLT  ;
    1cf0:	87 e2       	ldi	r24, 0x27	; 39
    1cf2:	90 e0       	ldi	r25, 0x00	; 0

00001cf4 <.Loc.4>:
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	20 81       	ld	r18, Z
    1cf8:	2f 73       	andi	r18, 0x3F	; 63
    1cfa:	20 64       	ori	r18, 0x40	; 64
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	20 83       	st	Z, r18

00001d00 <.Loc.5>:

	ADCSRA_REG->ADPS = PRSCALLER ;
    1d00:	86 e2       	ldi	r24, 0x26	; 38
    1d02:	90 e0       	ldi	r25, 0x00	; 0

00001d04 <.Loc.6>:
    1d04:	fc 01       	movw	r30, r24
    1d06:	20 81       	ld	r18, Z
    1d08:	28 7f       	andi	r18, 0xF8	; 248
    1d0a:	24 60       	ori	r18, 0x04	; 4
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	20 83       	st	Z, r18

00001d10 <.Loc.7>:

	ADCSRA_REG->ADEN = EN        ;
    1d10:	86 e2       	ldi	r24, 0x26	; 38
    1d12:	90 e0       	ldi	r25, 0x00	; 0

00001d14 <.Loc.8>:
    1d14:	fc 01       	movw	r30, r24
    1d16:	20 81       	ld	r18, Z
    1d18:	20 68       	ori	r18, 0x80	; 128
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 83       	st	Z, r18

00001d1e <.Loc.9>:
	ADCSRA_REG->ADIE = EN        ;
#endif


#ifdef TRIGGER_ENABEL
	ADCSRA_REG->ADATE =EN ;
    1d1e:	86 e2       	ldi	r24, 0x26	; 38
    1d20:	90 e0       	ldi	r25, 0x00	; 0

00001d22 <.Loc.10>:
    1d22:	fc 01       	movw	r30, r24
    1d24:	20 81       	ld	r18, Z
    1d26:	20 62       	ori	r18, 0x20	; 32
    1d28:	fc 01       	movw	r30, r24
    1d2a:	20 83       	st	Z, r18

00001d2c <.Loc.11>:
	SFIOR_REG->SFIOR_ADTS = TRIGGER_SOURCE;
    1d2c:	80 e5       	ldi	r24, 0x50	; 80
    1d2e:	90 e0       	ldi	r25, 0x00	; 0

00001d30 <.Loc.12>:
    1d30:	fc 01       	movw	r30, r24
    1d32:	20 81       	ld	r18, Z
    1d34:	2f 71       	andi	r18, 0x1F	; 31
    1d36:	fc 01       	movw	r30, r24
    1d38:	20 83       	st	Z, r18

00001d3a <.Loc.13>:
#endif

}
    1d3a:	00 00       	nop
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <ADC_voidChannelSellect>:

/*****************************************************************************************/

/* Sellect one ADC Channel to work */
ACD_ERROR_RETURN ADC_voidChannelSellect(ACD_CHANNEL_NUM copy_u8ChannelSellect )
{
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <L0^A>

00001d48 <L0^A>:
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	8a 83       	std	Y+2, r24	; 0x02

00001d4e <.Loc.15>:
	ACD_ERROR_RETURN local_error =OK ;
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	89 83       	std	Y+1, r24	; 0x01

00001d52 <.Loc.16>:
	if( ( copy_u8ChannelSellect<=7 )   )
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	88 30       	cpi	r24, 0x08	; 8
    1d56:	60 f4       	brcc	.+24     	; 0x1d70 <.L3>

00001d58 <.Loc.17>:
	{


		ADMUX_REG->MUX = copy_u8ChannelSellect ;
    1d58:	87 e2       	ldi	r24, 0x27	; 39
    1d5a:	90 e0       	ldi	r25, 0x00	; 0

00001d5c <.Loc.18>:
    1d5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5e:	2f 71       	andi	r18, 0x1F	; 31
    1d60:	2f 71       	andi	r18, 0x1F	; 31
    1d62:	fc 01       	movw	r30, r24
    1d64:	30 81       	ld	r19, Z
    1d66:	30 7e       	andi	r19, 0xE0	; 224
    1d68:	23 2b       	or	r18, r19
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	20 83       	st	Z, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <.L4>

00001d70 <.L3>:
	}
	else
	{
		local_error =NUM_OUT_OF_RANGE ;
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	89 83       	std	Y+1, r24	; 0x01

00001d74 <.L4>:
	}

	return local_error ;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01

00001d76 <.Loc.21>:

}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <ADC_StartConversionBoling>:

/*****************************************************************************************/

/* Start Conversion on ADC Channel  Sellected */
ACD_ERROR_RETURN ADC_StartConversionBoling(u16 *copy_Pu8Data)
{
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <L0^A>

00001d86 <L0^A>:
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <L0^A>

00001d88 <L0^A>:
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <L0^A>

00001d8a <L0^A>:
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	9f 83       	std	Y+7, r25	; 0x07
    1d92:	8e 83       	std	Y+6, r24	; 0x06

00001d94 <.Loc.23>:
	u32 counter =0 ;
    1d94:	19 82       	std	Y+1, r1	; 0x01
    1d96:	1a 82       	std	Y+2, r1	; 0x02
    1d98:	1b 82       	std	Y+3, r1	; 0x03
    1d9a:	1c 82       	std	Y+4, r1	; 0x04

00001d9c <.Loc.24>:
	ACD_ERROR_RETURN local_error =OK ;
    1d9c:	82 e0       	ldi	r24, 0x02	; 2
    1d9e:	8d 83       	std	Y+5, r24	; 0x05

00001da0 <.Loc.25>:

	if(copy_Pu8Data != NULL)
    1da0:	8e 81       	ldd	r24, Y+6	; 0x06
    1da2:	9f 81       	ldd	r25, Y+7	; 0x07
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	09 f4       	brne	.+2      	; 0x1daa <.Loc.26>

00001da8 <L0^A>:
    1da8:	43 c0       	rjmp	.+134    	; 0x1e30 <.L7>

00001daa <.Loc.26>:
	{
		// Start Conversion --- bit H
		ADCSRA_REG->ADSC = 1 ;
    1daa:	86 e2       	ldi	r24, 0x26	; 38
    1dac:	90 e0       	ldi	r25, 0x00	; 0

00001dae <.Loc.27>:
    1dae:	fc 01       	movw	r30, r24
    1db0:	20 81       	ld	r18, Z
    1db2:	20 64       	ori	r18, 0x40	; 64
    1db4:	fc 01       	movw	r30, r24
    1db6:	20 83       	st	Z, r18

00001db8 <.Loc.28>:
		// wait for flag
		while ( (ADCSRA_REG->ADIF ==0) &&counter<=TIME_OUT )
    1db8:	0b c0       	rjmp	.+22     	; 0x1dd0 <.L8>

00001dba <.L10>:
		{
			counter ++ ;
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	ab 81       	ldd	r26, Y+3	; 0x03
    1dc0:	bc 81       	ldd	r27, Y+4	; 0x04
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	a1 1d       	adc	r26, r1
    1dc6:	b1 1d       	adc	r27, r1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	ab 83       	std	Y+3, r26	; 0x03
    1dce:	bc 83       	std	Y+4, r27	; 0x04

00001dd0 <.L8>:
		while ( (ADCSRA_REG->ADIF ==0) &&counter<=TIME_OUT )
    1dd0:	86 e2       	ldi	r24, 0x26	; 38
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	80 81       	ld	r24, Z
    1dd8:	82 95       	swap	r24
    1dda:	81 70       	andi	r24, 0x01	; 1

00001ddc <.Loc.31>:
    1ddc:	81 15       	cp	r24, r1
    1dde:	59 f4       	brne	.+22     	; 0x1df6 <.L9>

00001de0 <.Loc.32>:
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	ab 81       	ldd	r26, Y+3	; 0x03
    1de6:	bc 81       	ldd	r27, Y+4	; 0x04
    1de8:	81 3a       	cpi	r24, 0xA1	; 161
    1dea:	f6 e8       	ldi	r31, 0x86	; 134
    1dec:	9f 07       	cpc	r25, r31
    1dee:	f1 e0       	ldi	r31, 0x01	; 1
    1df0:	af 07       	cpc	r26, r31
    1df2:	b1 05       	cpc	r27, r1
    1df4:	10 f3       	brcs	.-60     	; 0x1dba <.L10>

00001df6 <.L9>:
		}
		if((ADCSRA_REG->ADIF) ==1 )
    1df6:	86 e2       	ldi	r24, 0x26	; 38
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	80 81       	ld	r24, Z
    1dfe:	82 95       	swap	r24
    1e00:	81 70       	andi	r24, 0x01	; 1

00001e02 <.Loc.34>:
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	91 f4       	brne	.+36     	; 0x1e2a <.L11>

00001e06 <.Loc.35>:
		{
			// Clear flag
			ADCSRA_REG->ADIF = 1 ;
    1e06:	86 e2       	ldi	r24, 0x26	; 38
    1e08:	90 e0       	ldi	r25, 0x00	; 0

00001e0a <.Loc.36>:
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	20 81       	ld	r18, Z
    1e0e:	20 61       	ori	r18, 0x10	; 16
    1e10:	fc 01       	movw	r30, r24
    1e12:	20 83       	st	Z, r18

00001e14 <.Loc.37>:

        #if TYPE_DATA ==RIGHT_DATA
			//store data from REG ( ADC_DATA )  to copy_Pu8Data
			(*copy_Pu8Data) = ADC_DATA     ;
    1e14:	84 e2       	ldi	r24, 0x24	; 36
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	fc 01       	movw	r30, r24
    1e1a:	20 81       	ld	r18, Z
    1e1c:	31 81       	ldd	r19, Z+1	; 0x01

00001e1e <.Loc.38>:
    1e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e20:	9f 81       	ldd	r25, Y+7	; 0x07
    1e22:	fc 01       	movw	r30, r24
    1e24:	31 83       	std	Z+1, r19	; 0x01
    1e26:	20 83       	st	Z, r18
    1e28:	04 c0       	rjmp	.+8      	; 0x1e32 <.L12>

00001e2a <.L11>:
       #endif
		}

		else
		{
			local_error=TIME_OUT_ERROR ;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <.L12>

00001e30 <.L7>:

	}

	else
	{
		local_error=NULL_ERROR ;
    1e30:	1d 82       	std	Y+5, r1	; 0x05

00001e32 <.L12>:
	}
	return  local_error ;
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05

00001e34 <.Loc.42>:
}
    1e34:	27 96       	adiw	r28, 0x07	; 7
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	08 95       	ret

00001e46 <ADC_StartConversion>:
/*****************************************************************************************/
void ADC_StartConversion(void)
{
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62

00001e4e <.Loc.44>:
	// Start Conversion --- bit H
	ADCSRA_REG->ADSC = 1 ;
    1e4e:	86 e2       	ldi	r24, 0x26	; 38
    1e50:	90 e0       	ldi	r25, 0x00	; 0

00001e52 <.Loc.45>:
    1e52:	fc 01       	movw	r30, r24
    1e54:	20 81       	ld	r18, Z
    1e56:	20 64       	ori	r18, 0x40	; 64
    1e58:	fc 01       	movw	r30, r24
    1e5a:	20 83       	st	Z, r18

00001e5c <.Loc.46>:
}
    1e5c:	00 00       	nop
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	08 95       	ret

00001e64 <ADC_voidChannelMulBoling>:



/* Read all   ADC Channel and store it in array */
ACD_ERROR_RETURN ADC_voidChannelMulBoling(u16 *copy_Pu8Data)
{
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <L0^A>

00001e6a <L0^A>:
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <L0^A>

00001e6c <L0^A>:
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03

00001e74 <.Loc.48>:
	u8 i =4 ;
    1e74:	84 e0       	ldi	r24, 0x04	; 4
    1e76:	89 83       	std	Y+1, r24	; 0x01

00001e78 <.Loc.49>:
	ACD_ERROR_RETURN local_error =OK ;
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	8a 83       	std	Y+2, r24	; 0x02

00001e7c <.Loc.50>:
	if(copy_Pu8Data!=NULL)
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	b9 f0       	breq	.+46     	; 0x1eb2 <.L16>

00001e84 <.Loc.51>:
	{
		while(i!=0)
    1e84:	12 c0       	rjmp	.+36     	; 0x1eaa <.L17>

00001e86 <.L18>:
		{
			i-- ;
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	81 50       	subi	r24, 0x01	; 1
    1e8a:	89 83       	std	Y+1, r24	; 0x01

00001e8c <.Loc.53>:
			ADC_voidChannelSellect(i);
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <ADC_voidChannelSellect>

00001e92 <.Loc.54>:
			local_error =ADC_StartConversionBoling( (&copy_Pu8Data[i]) ) ;
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25

00001e9c <.Loc.55>:
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea0:	82 0f       	add	r24, r18
    1ea2:	93 1f       	adc	r25, r19
    1ea4:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <ADC_StartConversionBoling>
    1ea8:	8a 83       	std	Y+2, r24	; 0x02

00001eaa <.L17>:
		while(i!=0)
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	81 15       	cp	r24, r1
    1eae:	59 f7       	brne	.-42     	; 0x1e86 <.L18>
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <.L19>

00001eb2 <.L16>:
		}

	}
	else
	{
		local_error =NULL_ERROR ;
    1eb2:	1a 82       	std	Y+2, r1	; 0x02

00001eb4 <.L19>:
	}

	return  local_error ;
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02

00001eb6 <.Loc.59>:
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <ADC_Mapping>:
/*****************************************************************************************/



u16 ADC_Mapping( u16 x1 ,u16 x2 , u16 y1 ,u16 y2)
{
    1ec4:	cf 92       	push	r12
    1ec6:	df 92       	push	r13
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	2c 97       	sbiw	r28, 0x0c	; 12
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	78 87       	std	Y+8, r23	; 0x08
    1eea:	6f 83       	std	Y+7, r22	; 0x07
    1eec:	5a 87       	std	Y+10, r21	; 0x0a
    1eee:	49 87       	std	Y+9, r20	; 0x09
    1ef0:	3c 87       	std	Y+12, r19	; 0x0c
    1ef2:	2b 87       	std	Y+11, r18	; 0x0b

00001ef4 <.Loc.61>:
	u16 data ;
	u16 local_adc_data = 0 ;
    1ef4:	1a 82       	std	Y+2, r1	; 0x02
    1ef6:	19 82       	std	Y+1, r1	; 0x01

00001ef8 <.Loc.62>:
#if TYPE_DATA ==RIGHT_DATA
	//store data from REG ( ADC_DATA )  to copy_Pu8Data
	local_adc_data = ADC_DATA     ;
    1ef8:	84 e2       	ldi	r24, 0x24	; 36
    1efa:	90 e0       	ldi	r25, 0x00	; 0

00001efc <.Loc.63>:
    1efc:	fc 01       	movw	r30, r24
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01

00001f06 <.Loc.64>:
#elif TYPE_DATA ==LEFT_DATA

	local_adc_data=((u16)ADC_DATA>>6) ;
#endif

	data =( ( (u32)(local_adc_data-x1)*(y2-y1) ) / (x2-x1) ) +y1 ;
    1f06:	29 81       	ldd	r18, Y+1	; 0x01
    1f08:	3a 81       	ldd	r19, Y+2	; 0x02
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	a9 01       	movw	r20, r18
    1f10:	48 1b       	sub	r20, r24
    1f12:	59 0b       	sbc	r21, r25
    1f14:	ca 01       	movw	r24, r20

00001f16 <.Loc.65>:
    1f16:	cc 01       	movw	r24, r24
    1f18:	a0 e0       	ldi	r26, 0x00	; 0
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0

00001f1c <.Loc.66>:
    1f1c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f1e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f20:	29 85       	ldd	r18, Y+9	; 0x09
    1f22:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f24:	ba 01       	movw	r22, r20
    1f26:	62 1b       	sub	r22, r18
    1f28:	73 0b       	sbc	r23, r19
    1f2a:	9b 01       	movw	r18, r22
    1f2c:	69 01       	movw	r12, r18
    1f2e:	e1 2c       	mov	r14, r1
    1f30:	f1 2c       	mov	r15, r1

00001f32 <.Loc.67>:
    1f32:	9c 01       	movw	r18, r24
    1f34:	ad 01       	movw	r20, r26
    1f36:	c7 01       	movw	r24, r14
    1f38:	b6 01       	movw	r22, r12
    1f3a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsi3>
    1f3e:	ab 01       	movw	r20, r22
    1f40:	bc 01       	movw	r22, r24

00001f42 <.Loc.68>:
    1f42:	2f 81       	ldd	r18, Y+7	; 0x07
    1f44:	38 85       	ldd	r19, Y+8	; 0x08
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	f9 01       	movw	r30, r18
    1f4c:	e8 1b       	sub	r30, r24
    1f4e:	f9 0b       	sbc	r31, r25
    1f50:	cf 01       	movw	r24, r30
    1f52:	8c 01       	movw	r16, r24
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0

00001f58 <.Loc.69>:
    1f58:	cb 01       	movw	r24, r22
    1f5a:	ba 01       	movw	r22, r20
    1f5c:	a9 01       	movw	r20, r18
    1f5e:	98 01       	movw	r18, r16
    1f60:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__udivmodsi4>
    1f64:	da 01       	movw	r26, r20
    1f66:	c9 01       	movw	r24, r18

00001f68 <.Loc.70>:
    1f68:	9c 01       	movw	r18, r24

00001f6a <.Loc.71>:
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6e:	82 0f       	add	r24, r18
    1f70:	93 1f       	adc	r25, r19
    1f72:	9c 83       	std	Y+4, r25	; 0x04
    1f74:	8b 83       	std	Y+3, r24	; 0x03

00001f76 <.Loc.72>:

	return  data ;
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04

00001f7a <.Loc.73>:
}
    1f7a:	2c 96       	adiw	r28, 0x0c	; 12
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	08 95       	ret

00001f98 <main>:
#include "../LCD/LCD_INTERFACE.h"
#include "../TWI/TWI_CONFIG.h"
#include "../TWI/TWI_INTERFACE.h"

int main(void)
{
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	62 97       	sbiw	r28, 0x12	; 18
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61

00001fac <.Loc.1>:
	u8 data_To_Slave[]="HI";
    1fac:	88 e4       	ldi	r24, 0x48	; 72
    1fae:	99 e4       	ldi	r25, 0x49	; 73
    1fb0:	99 8b       	std	Y+17, r25	; 0x11
    1fb2:	88 8b       	std	Y+16, r24	; 0x10
    1fb4:	1a 8a       	std	Y+18, r1	; 0x12

00001fb6 <.Loc.2>:
    TWI_MasterInit();
    1fb6:	0e 94 c7 01 	call	0x38e	; 0x38e <TWI_MasterInit>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a8 ec       	ldi	r26, 0xC8	; 200
    1fc0:	b2 e4       	ldi	r27, 0x42	; 66
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	ac 83       	std	Y+4, r26	; 0x04
    1fc8:	bd 83       	std	Y+5, r27	; 0x05

00001fca <.LBB13>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a ef       	ldi	r20, 0xFA	; 250
    1fd0:	54 e4       	ldi	r21, 0x44	; 68
    1fd2:	6a 81       	ldd	r22, Y+2	; 0x02
    1fd4:	7b 81       	ldd	r23, Y+3	; 0x03
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fda:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8e 83       	std	Y+6, r24	; 0x06
    1fe4:	9f 83       	std	Y+7, r25	; 0x07
    1fe6:	a8 87       	std	Y+8, r26	; 0x08
    1fe8:	b9 87       	std	Y+9, r27	; 0x09

00001fea <.Loc.4>:
	if (__tmp < 1.0)
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ff4:	7f 81       	ldd	r23, Y+7	; 0x07
    1ff6:	88 85       	ldd	r24, Y+8	; 0x08
    1ff8:	99 85       	ldd	r25, Y+9	; 0x09
    1ffa:	0e 94 ba 10 	call	0x2174	; 0x2174 <__cmpsf2>
    1ffe:	81 15       	cp	r24, r1
    2000:	2c f4       	brge	.+10     	; 0x200c <.L15>

00002002 <.Loc.5>:
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9b 87       	std	Y+11, r25	; 0x0b
    2008:	8a 87       	std	Y+10, r24	; 0x0a
    200a:	40 c0       	rjmp	.+128    	; 0x208c <.L4>

0000200c <.L15>:
	else if (__tmp > 65535)
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	6e 81       	ldd	r22, Y+6	; 0x06
    2016:	7f 81       	ldd	r23, Y+7	; 0x07
    2018:	88 85       	ldd	r24, Y+8	; 0x08
    201a:	99 85       	ldd	r25, Y+9	; 0x09
    201c:	0e 94 3b 11 	call	0x2276	; 0x2276 <__gesf2>
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	54 f1       	brlt	.+84     	; 0x2078 <.L16>

00002024 <.Loc.7>:
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	6a 81       	ldd	r22, Y+2	; 0x02
    202e:	7b 81       	ldd	r23, Y+3	; 0x03
    2030:	8c 81       	ldd	r24, Y+4	; 0x04
    2032:	9d 81       	ldd	r25, Y+5	; 0x05
    2034:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22

0000203c <.Loc.8>:
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9b 87       	std	Y+11, r25	; 0x0b
    204a:	8a 87       	std	Y+10, r24	; 0x0a

0000204c <.Loc.9>:
		while(__ticks)
    204c:	10 c0       	rjmp	.+32     	; 0x206e <.L7>

0000204e <.L8>:
    204e:	88 ec       	ldi	r24, 0xC8	; 200
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9d 87       	std	Y+13, r25	; 0x0d
    2054:	8c 87       	std	Y+12, r24	; 0x0c

00002056 <.LBB15>:
    2056:	8c 85       	ldd	r24, Y+12	; 0x0c
    2058:	9d 85       	ldd	r25, Y+13	; 0x0d

0000205a <.L1^B1>:
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <.L1^B1>
    205e:	9d 87       	std	Y+13, r25	; 0x0d
    2060:	8c 87       	std	Y+12, r24	; 0x0c

00002062 <.Loc.11>:
	...

00002064 <.LBE15>:
			__ticks --;
    2064:	8a 85       	ldd	r24, Y+10	; 0x0a
    2066:	9b 85       	ldd	r25, Y+11	; 0x0b
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	9b 87       	std	Y+11, r25	; 0x0b
    206c:	8a 87       	std	Y+10, r24	; 0x0a

0000206e <.L7>:
		while(__ticks)
    206e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2070:	9b 85       	ldd	r25, Y+11	; 0x0b
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	61 f7       	brne	.-40     	; 0x204e <.L8>

00002076 <.Loc.14>:
		return;
    2076:	15 c0       	rjmp	.+42     	; 0x20a2 <.L12>

00002078 <.L16>:
		__ticks = (uint16_t)__tmp;
    2078:	6e 81       	ldd	r22, Y+6	; 0x06
    207a:	7f 81       	ldd	r23, Y+7	; 0x07
    207c:	88 85       	ldd	r24, Y+8	; 0x08
    207e:	99 85       	ldd	r25, Y+9	; 0x09
    2080:	0e 94 bf 10 	call	0x217e	; 0x217e <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9b 87       	std	Y+11, r25	; 0x0b
    208a:	8a 87       	std	Y+10, r24	; 0x0a

0000208c <.L4>:
    208c:	8a 85       	ldd	r24, Y+10	; 0x0a
    208e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2090:	9f 87       	std	Y+15, r25	; 0x0f
    2092:	8e 87       	std	Y+14, r24	; 0x0e

00002094 <.LBB17>:
    2094:	8e 85       	ldd	r24, Y+14	; 0x0e
    2096:	9f 85       	ldd	r25, Y+15	; 0x0f

00002098 <.L1^B2>:
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <.L1^B2>
    209c:	9f 87       	std	Y+15, r25	; 0x0f
    209e:	8e 87       	std	Y+14, r24	; 0x0e

000020a0 <.Loc.17>:
	...

000020a2 <.L12>:
    _delay_ms(100);
    while (1)
    {
    	TWI_StartCondition();
    20a2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <TWI_StartCondition>

000020a6 <.Loc.19>:
    	TWI_SendAddress(0x20, 0);
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	0e 94 2e 02 	call	0x45c	; 0x45c <TWI_SendAddress>

000020ae <.LBB19>:
    	for(u8 i=0;i<3;i++){
    20ae:	19 82       	std	Y+1, r1	; 0x01

000020b0 <.Loc.21>:
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <.L10>

000020b2 <.L11>:
    		TWI_WriteData(data_To_Slave[i]);
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e 01       	movw	r18, r28
    20ba:	20 5f       	subi	r18, 0xF0	; 240
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	0e 94 5f 02 	call	0x4be	; 0x4be <TWI_WriteData>

000020ca <.Loc.23>:
    	for(u8 i=0;i<3;i++){
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	89 83       	std	Y+1, r24	; 0x01

000020d0 <.L10>:
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	83 30       	cpi	r24, 0x03	; 3
    20d4:	70 f3       	brcs	.-36     	; 0x20b2 <.L11>

000020d6 <.LBE19>:
    	}
        TWI_Stop();
    20d6:	0e 94 11 02 	call	0x422	; 0x422 <TWI_Stop>

000020da <.Loc.26>:
    	TWI_StartCondition();
    20da:	e3 cf       	rjmp	.-58     	; 0x20a2 <.L12>

000020dc <__mulsi3>:
    20dc:	db 01       	movw	r26, r22

000020de <.Loc.1>:
    20de:	8f 93       	push	r24

000020e0 <.Loc.2>:
    20e0:	9f 93       	push	r25

000020e2 <.Loc.3>:
    20e2:	0e 94 a0 10 	call	0x2140	; 0x2140 <__muluhisi3>

000020e6 <.Loc.4>:
    20e6:	bf 91       	pop	r27

000020e8 <.Loc.5>:
    20e8:	af 91       	pop	r26

000020ea <.Loc.6>:
    20ea:	a2 9f       	mul	r26, r18

000020ec <.Loc.7>:
    20ec:	80 0d       	add	r24, r0

000020ee <.Loc.8>:
    20ee:	91 1d       	adc	r25, r1

000020f0 <.Loc.9>:
    20f0:	a3 9f       	mul	r26, r19

000020f2 <.Loc.10>:
    20f2:	90 0d       	add	r25, r0

000020f4 <.Loc.11>:
    20f4:	b2 9f       	mul	r27, r18

000020f6 <.Loc.12>:
    20f6:	90 0d       	add	r25, r0

000020f8 <.Loc.13>:
    20f8:	11 24       	eor	r1, r1

000020fa <.Loc.14>:
    20fa:	08 95       	ret

000020fc <__udivmodsi4>:
    20fc:	a1 e2       	ldi	r26, 0x21	; 33

000020fe <.Loc.1>:
    20fe:	1a 2e       	mov	r1, r26

00002100 <.Loc.2>:
    2100:	aa 1b       	sub	r26, r26

00002102 <.Loc.3>:
    2102:	bb 1b       	sub	r27, r27

00002104 <.Loc.4>:
    2104:	fd 01       	movw	r30, r26

00002106 <.Loc.5>:
    2106:	0d c0       	rjmp	.+26     	; 0x2122 <__udivmodsi4_ep>

00002108 <__udivmodsi4_loop>:
    2108:	aa 1f       	adc	r26, r26

0000210a <.Loc.7>:
    210a:	bb 1f       	adc	r27, r27

0000210c <.Loc.8>:
    210c:	ee 1f       	adc	r30, r30

0000210e <.Loc.9>:
    210e:	ff 1f       	adc	r31, r31

00002110 <.Loc.10>:
    2110:	a2 17       	cp	r26, r18

00002112 <.Loc.11>:
    2112:	b3 07       	cpc	r27, r19

00002114 <.Loc.12>:
    2114:	e4 07       	cpc	r30, r20

00002116 <.Loc.13>:
    2116:	f5 07       	cpc	r31, r21

00002118 <.Loc.14>:
    2118:	20 f0       	brcs	.+8      	; 0x2122 <__udivmodsi4_ep>

0000211a <.Loc.15>:
    211a:	a2 1b       	sub	r26, r18

0000211c <.Loc.16>:
    211c:	b3 0b       	sbc	r27, r19

0000211e <.Loc.17>:
    211e:	e4 0b       	sbc	r30, r20

00002120 <.Loc.18>:
    2120:	f5 0b       	sbc	r31, r21

00002122 <__udivmodsi4_ep>:
    2122:	66 1f       	adc	r22, r22

00002124 <.Loc.20>:
    2124:	77 1f       	adc	r23, r23

00002126 <.Loc.21>:
    2126:	88 1f       	adc	r24, r24

00002128 <.Loc.22>:
    2128:	99 1f       	adc	r25, r25

0000212a <.Loc.23>:
    212a:	1a 94       	dec	r1

0000212c <.Loc.24>:
    212c:	69 f7       	brne	.-38     	; 0x2108 <__udivmodsi4_loop>

0000212e <.Loc.25>:
    212e:	60 95       	com	r22

00002130 <.Loc.26>:
    2130:	70 95       	com	r23

00002132 <.Loc.27>:
    2132:	80 95       	com	r24

00002134 <.Loc.28>:
    2134:	90 95       	com	r25

00002136 <.Loc.29>:
    2136:	9b 01       	movw	r18, r22

00002138 <.Loc.30>:
    2138:	ac 01       	movw	r20, r24

0000213a <.Loc.31>:
    213a:	bd 01       	movw	r22, r26

0000213c <.Loc.32>:
    213c:	cf 01       	movw	r24, r30

0000213e <.Loc.33>:
    213e:	08 95       	ret

00002140 <__muluhisi3>:
    2140:	0e 94 ab 10 	call	0x2156	; 0x2156 <__umulhisi3>

00002144 <.Loc.1>:
    2144:	a5 9f       	mul	r26, r21

00002146 <.Loc.2>:
    2146:	90 0d       	add	r25, r0

00002148 <.Loc.3>:
    2148:	b4 9f       	mul	r27, r20

0000214a <.Loc.4>:
    214a:	90 0d       	add	r25, r0

0000214c <.Loc.5>:
    214c:	a4 9f       	mul	r26, r20

0000214e <.Loc.6>:
    214e:	80 0d       	add	r24, r0

00002150 <.Loc.7>:
    2150:	91 1d       	adc	r25, r1

00002152 <.Loc.8>:
    2152:	11 24       	eor	r1, r1

00002154 <.Loc.9>:
    2154:	08 95       	ret

00002156 <__umulhisi3>:
    2156:	a2 9f       	mul	r26, r18

00002158 <.Loc.1>:
    2158:	b0 01       	movw	r22, r0

0000215a <.Loc.2>:
    215a:	b3 9f       	mul	r27, r19

0000215c <.Loc.3>:
    215c:	c0 01       	movw	r24, r0

0000215e <.Loc.4>:
    215e:	a3 9f       	mul	r26, r19

00002160 <.Loc.5>:
    2160:	70 0d       	add	r23, r0

00002162 <.Loc.6>:
    2162:	81 1d       	adc	r24, r1

00002164 <.Loc.7>:
    2164:	11 24       	eor	r1, r1

00002166 <.Loc.8>:
    2166:	91 1d       	adc	r25, r1

00002168 <.Loc.9>:
    2168:	b2 9f       	mul	r27, r18

0000216a <.Loc.10>:
    216a:	70 0d       	add	r23, r0

0000216c <.Loc.11>:
    216c:	81 1d       	adc	r24, r1

0000216e <.Loc.12>:
    216e:	11 24       	eor	r1, r1

00002170 <.Loc.13>:
    2170:	91 1d       	adc	r25, r1

00002172 <.Loc.14>:
    2172:	08 95       	ret

00002174 <__cmpsf2>:
    2174:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__fp_cmp>
    2178:	08 f4       	brcc	.+2      	; 0x217c <.L1^B1>
    217a:	81 e0       	ldi	r24, 0x01	; 1

0000217c <.L1^B1>:
    217c:	08 95       	ret

0000217e <__fixunssfsi>:
    217e:	0e 94 1a 11 	call	0x2234	; 0x2234 <__fp_splitA>
    2182:	88 f0       	brcs	.+34     	; 0x21a6 <.L_err>
    2184:	9f 57       	subi	r25, 0x7F	; 127
    2186:	98 f0       	brcs	.+38     	; 0x21ae <.L_zr>
    2188:	b9 2f       	mov	r27, r25
    218a:	99 27       	eor	r25, r25
    218c:	b7 51       	subi	r27, 0x17	; 23
    218e:	b0 f0       	brcs	.+44     	; 0x21bc <.L4^B1>
    2190:	e1 f0       	breq	.+56     	; 0x21ca <.L_sign>

00002192 <.L1^B1>:
    2192:	66 0f       	add	r22, r22
    2194:	77 1f       	adc	r23, r23
    2196:	88 1f       	adc	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	1a f0       	brmi	.+6      	; 0x21a2 <.L2^B1>
    219c:	ba 95       	dec	r27
    219e:	c9 f7       	brne	.-14     	; 0x2192 <.L1^B1>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <.L_sign>

000021a2 <.L2^B1>:
    21a2:	b1 30       	cpi	r27, 0x01	; 1
    21a4:	91 f0       	breq	.+36     	; 0x21ca <.L_sign>

000021a6 <.L_err>:
    21a6:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_zero>
    21aa:	b1 e0       	ldi	r27, 0x01	; 1
    21ac:	08 95       	ret

000021ae <.L_zr>:
    21ae:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__fp_zero>

000021b2 <.L3^B1>:
    21b2:	67 2f       	mov	r22, r23
    21b4:	78 2f       	mov	r23, r24
    21b6:	88 27       	eor	r24, r24
    21b8:	b8 5f       	subi	r27, 0xF8	; 248
    21ba:	39 f0       	breq	.+14     	; 0x21ca <.L_sign>

000021bc <.L4^B1>:
    21bc:	b9 3f       	cpi	r27, 0xF9	; 249
    21be:	cc f3       	brlt	.-14     	; 0x21b2 <.L3^B1>

000021c0 <.L5^B1>:
    21c0:	86 95       	lsr	r24
    21c2:	77 95       	ror	r23
    21c4:	67 95       	ror	r22
    21c6:	b3 95       	inc	r27
    21c8:	d9 f7       	brne	.-10     	; 0x21c0 <.L5^B1>

000021ca <.L_sign>:
    21ca:	3e f4       	brtc	.+14     	; 0x21da <.L6^B1>
    21cc:	90 95       	com	r25
    21ce:	80 95       	com	r24
    21d0:	70 95       	com	r23
    21d2:	61 95       	neg	r22
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	8f 4f       	sbci	r24, 0xFF	; 255
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255

000021da <.L6^B1>:
    21da:	08 95       	ret

000021dc <__fp_cmp>:
    21dc:	99 0f       	add	r25, r25
    21de:	00 08       	sbc	r0, r0
    21e0:	55 0f       	add	r21, r21
    21e2:	aa 0b       	sbc	r26, r26
    21e4:	e0 e8       	ldi	r30, 0x80	; 128
    21e6:	fe ef       	ldi	r31, 0xFE	; 254
    21e8:	16 16       	cp	r1, r22
    21ea:	17 06       	cpc	r1, r23
    21ec:	e8 07       	cpc	r30, r24
    21ee:	f9 07       	cpc	r31, r25
    21f0:	c0 f0       	brcs	.+48     	; 0x2222 <.L9^B1>
    21f2:	12 16       	cp	r1, r18
    21f4:	13 06       	cpc	r1, r19
    21f6:	e4 07       	cpc	r30, r20
    21f8:	f5 07       	cpc	r31, r21
    21fa:	98 f0       	brcs	.+38     	; 0x2222 <.L9^B1>
    21fc:	62 1b       	sub	r22, r18
    21fe:	73 0b       	sbc	r23, r19
    2200:	84 0b       	sbc	r24, r20
    2202:	95 0b       	sbc	r25, r21
    2204:	39 f4       	brne	.+14     	; 0x2214 <.L1^B1>
    2206:	0a 26       	eor	r0, r26
    2208:	61 f0       	breq	.+24     	; 0x2222 <.L9^B1>
    220a:	23 2b       	or	r18, r19
    220c:	24 2b       	or	r18, r20
    220e:	25 2b       	or	r18, r21
    2210:	21 f4       	brne	.+8      	; 0x221a <.L2^B1>
    2212:	08 95       	ret

00002214 <.L1^B1>:
    2214:	0a 26       	eor	r0, r26
    2216:	09 f4       	brne	.+2      	; 0x221a <.L2^B1>
    2218:	a1 40       	sbci	r26, 0x01	; 1

0000221a <.L2^B1>:
    221a:	a6 95       	lsr	r26
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	81 1d       	adc	r24, r1
    2220:	81 1d       	adc	r24, r1

00002222 <.L9^B1>:
    2222:	08 95       	ret

00002224 <__fp_split3>:
    2224:	57 fd       	sbrc	r21, 7
    2226:	90 58       	subi	r25, 0x80	; 128
    2228:	44 0f       	add	r20, r20
    222a:	55 1f       	adc	r21, r21
    222c:	59 f0       	breq	.+22     	; 0x2244 <.L4^B1>
    222e:	5f 3f       	cpi	r21, 0xFF	; 255
    2230:	71 f0       	breq	.+28     	; 0x224e <.L5^B1>

00002232 <.L1^B1>:
    2232:	47 95       	ror	r20

00002234 <__fp_splitA>:
    2234:	88 0f       	add	r24, r24
    2236:	97 fb       	bst	r25, 7
    2238:	99 1f       	adc	r25, r25
    223a:	61 f0       	breq	.+24     	; 0x2254 <.L6^B1>
    223c:	9f 3f       	cpi	r25, 0xFF	; 255
    223e:	79 f0       	breq	.+30     	; 0x225e <.L7^B1>

00002240 <.L3^B1>:
    2240:	87 95       	ror	r24
    2242:	08 95       	ret

00002244 <.L4^B1>:
    2244:	12 16       	cp	r1, r18
    2246:	13 06       	cpc	r1, r19
    2248:	14 06       	cpc	r1, r20
    224a:	55 1f       	adc	r21, r21
    224c:	f2 cf       	rjmp	.-28     	; 0x2232 <.L1^B1>

0000224e <.L5^B1>:
    224e:	46 95       	lsr	r20
    2250:	f1 df       	rcall	.-30     	; 0x2234 <__fp_splitA>
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <.L8^B1>

00002254 <.L6^B1>:
    2254:	16 16       	cp	r1, r22
    2256:	17 06       	cpc	r1, r23
    2258:	18 06       	cpc	r1, r24
    225a:	99 1f       	adc	r25, r25
    225c:	f1 cf       	rjmp	.-30     	; 0x2240 <.L3^B1>

0000225e <.L7^B1>:
    225e:	86 95       	lsr	r24
    2260:	71 05       	cpc	r23, r1
    2262:	61 05       	cpc	r22, r1

00002264 <.L8^B1>:
    2264:	08 94       	sec
    2266:	08 95       	ret

00002268 <__fp_zero>:
    2268:	e8 94       	clt

0000226a <__fp_szero>:
    226a:	bb 27       	eor	r27, r27
    226c:	66 27       	eor	r22, r22
    226e:	77 27       	eor	r23, r23
    2270:	cb 01       	movw	r24, r22
    2272:	97 f9       	bld	r25, 7
    2274:	08 95       	ret

00002276 <__gesf2>:
    2276:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__fp_cmp>
    227a:	08 f4       	brcc	.+2      	; 0x227e <.L1^B1>
    227c:	8f ef       	ldi	r24, 0xFF	; 255

0000227e <.L1^B1>:
    227e:	08 95       	ret

00002280 <__mulsf3>:
    2280:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__mulsf3x>
    2284:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__fp_round>

00002288 <.L0^B1>:
    2288:	0e 94 b6 11 	call	0x236c	; 0x236c <__fp_pscA>
    228c:	38 f0       	brcs	.+14     	; 0x229c <.L1^B1>
    228e:	0e 94 bd 11 	call	0x237a	; 0x237a <__fp_pscB>
    2292:	20 f0       	brcs	.+8      	; 0x229c <.L1^B1>
    2294:	95 23       	and	r25, r21
    2296:	11 f0       	breq	.+4      	; 0x229c <.L1^B1>
    2298:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__fp_inf>

0000229c <.L1^B1>:
    229c:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__fp_nan>

000022a0 <.L2^B1>:
    22a0:	11 24       	eor	r1, r1
    22a2:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_szero>

000022a6 <__mulsf3x>:
    22a6:	0e 94 12 11 	call	0x2224	; 0x2224 <__fp_split3>
    22aa:	70 f3       	brcs	.-36     	; 0x2288 <.L0^B1>

000022ac <__mulsf3_pse>:
    22ac:	95 9f       	mul	r25, r21
    22ae:	c1 f3       	breq	.-16     	; 0x22a0 <.L2^B1>
    22b0:	95 0f       	add	r25, r21
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	55 1f       	adc	r21, r21
    22b6:	62 9f       	mul	r22, r18
    22b8:	f0 01       	movw	r30, r0
    22ba:	72 9f       	mul	r23, r18
    22bc:	bb 27       	eor	r27, r27
    22be:	f0 0d       	add	r31, r0
    22c0:	b1 1d       	adc	r27, r1
    22c2:	63 9f       	mul	r22, r19
    22c4:	aa 27       	eor	r26, r26
    22c6:	f0 0d       	add	r31, r0
    22c8:	b1 1d       	adc	r27, r1
    22ca:	aa 1f       	adc	r26, r26
    22cc:	64 9f       	mul	r22, r20
    22ce:	66 27       	eor	r22, r22
    22d0:	b0 0d       	add	r27, r0
    22d2:	a1 1d       	adc	r26, r1
    22d4:	66 1f       	adc	r22, r22
    22d6:	82 9f       	mul	r24, r18
    22d8:	22 27       	eor	r18, r18
    22da:	b0 0d       	add	r27, r0
    22dc:	a1 1d       	adc	r26, r1
    22de:	62 1f       	adc	r22, r18
    22e0:	73 9f       	mul	r23, r19
    22e2:	b0 0d       	add	r27, r0
    22e4:	a1 1d       	adc	r26, r1
    22e6:	62 1f       	adc	r22, r18
    22e8:	83 9f       	mul	r24, r19
    22ea:	a0 0d       	add	r26, r0
    22ec:	61 1d       	adc	r22, r1
    22ee:	22 1f       	adc	r18, r18
    22f0:	74 9f       	mul	r23, r20
    22f2:	33 27       	eor	r19, r19
    22f4:	a0 0d       	add	r26, r0
    22f6:	61 1d       	adc	r22, r1
    22f8:	23 1f       	adc	r18, r19
    22fa:	84 9f       	mul	r24, r20
    22fc:	60 0d       	add	r22, r0
    22fe:	21 1d       	adc	r18, r1
    2300:	82 2f       	mov	r24, r18
    2302:	76 2f       	mov	r23, r22
    2304:	6a 2f       	mov	r22, r26
    2306:	11 24       	eor	r1, r1
    2308:	9f 57       	subi	r25, 0x7F	; 127
    230a:	50 40       	sbci	r21, 0x00	; 0
    230c:	9a f0       	brmi	.+38     	; 0x2334 <.L13^B1>
    230e:	f1 f0       	breq	.+60     	; 0x234c <.L15^B1>

00002310 <.L10^B1>:
    2310:	88 23       	and	r24, r24
    2312:	4a f0       	brmi	.+18     	; 0x2326 <.L11^B1>
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	bb 1f       	adc	r27, r27
    231a:	66 1f       	adc	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	91 50       	subi	r25, 0x01	; 1
    2322:	50 40       	sbci	r21, 0x00	; 0
    2324:	a9 f7       	brne	.-22     	; 0x2310 <.L10^B1>

00002326 <.L11^B1>:
    2326:	9e 3f       	cpi	r25, 0xFE	; 254
    2328:	51 05       	cpc	r21, r1
    232a:	80 f0       	brcs	.+32     	; 0x234c <.L15^B1>
    232c:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__fp_inf>

00002330 <.L12^B1>:
    2330:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_szero>

00002334 <.L13^B1>:
    2334:	5f 3f       	cpi	r21, 0xFF	; 255
    2336:	e4 f3       	brlt	.-8      	; 0x2330 <.L12^B1>
    2338:	98 3e       	cpi	r25, 0xE8	; 232
    233a:	d4 f3       	brlt	.-12     	; 0x2330 <.L12^B1>

0000233c <.L14^B1>:
    233c:	86 95       	lsr	r24
    233e:	77 95       	ror	r23
    2340:	67 95       	ror	r22
    2342:	b7 95       	ror	r27
    2344:	f7 95       	ror	r31
    2346:	e7 95       	ror	r30
    2348:	9f 5f       	subi	r25, 0xFF	; 255
    234a:	c1 f7       	brne	.-16     	; 0x233c <.L14^B1>

0000234c <.L15^B1>:
    234c:	fe 2b       	or	r31, r30
    234e:	88 0f       	add	r24, r24
    2350:	91 1d       	adc	r25, r1
    2352:	96 95       	lsr	r25
    2354:	87 95       	ror	r24
    2356:	97 f9       	bld	r25, 7
    2358:	08 95       	ret

0000235a <__fp_inf>:
    235a:	97 f9       	bld	r25, 7
    235c:	9f 67       	ori	r25, 0x7F	; 127
    235e:	80 e8       	ldi	r24, 0x80	; 128
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	08 95       	ret

00002366 <__fp_nan>:
    2366:	9f ef       	ldi	r25, 0xFF	; 255
    2368:	80 ec       	ldi	r24, 0xC0	; 192
    236a:	08 95       	ret

0000236c <__fp_pscA>:
    236c:	00 24       	eor	r0, r0
    236e:	0a 94       	dec	r0
    2370:	16 16       	cp	r1, r22
    2372:	17 06       	cpc	r1, r23
    2374:	18 06       	cpc	r1, r24
    2376:	09 06       	cpc	r0, r25
    2378:	08 95       	ret

0000237a <__fp_pscB>:
    237a:	00 24       	eor	r0, r0
    237c:	0a 94       	dec	r0
    237e:	12 16       	cp	r1, r18
    2380:	13 06       	cpc	r1, r19
    2382:	14 06       	cpc	r1, r20
    2384:	05 06       	cpc	r0, r21
    2386:	08 95       	ret

00002388 <__fp_round>:
    2388:	09 2e       	mov	r0, r25
    238a:	03 94       	inc	r0
    238c:	00 0c       	add	r0, r0
    238e:	11 f4       	brne	.+4      	; 0x2394 <.L1^B1>
    2390:	88 23       	and	r24, r24
    2392:	52 f0       	brmi	.+20     	; 0x23a8 <.L3^B1>

00002394 <.L1^B1>:
    2394:	bb 0f       	add	r27, r27
    2396:	40 f4       	brcc	.+16     	; 0x23a8 <.L3^B1>
    2398:	bf 2b       	or	r27, r31
    239a:	11 f4       	brne	.+4      	; 0x23a0 <.L2^B1>
    239c:	60 ff       	sbrs	r22, 0
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <.L3^B1>

000023a0 <.L2^B1>:
    23a0:	6f 5f       	subi	r22, 0xFF	; 255
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	8f 4f       	sbci	r24, 0xFF	; 255
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255

000023a8 <.L3^B1>:
    23a8:	08 95       	ret

000023aa <_exit>:
    23aa:	f8 94       	cli

000023ac <__stop_program>:
    23ac:	ff cf       	rjmp	.-2      	; 0x23ac <__stop_program>
